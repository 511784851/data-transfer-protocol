syntax = "proto3";
package bbproto;
option java_package = "com.blemobi.sep.probuf";
option java_outer_classname = "ResultProtos";

// 通用操作结果返回
message PResult {
	int32 errorCode = 1;	//错误码：0为正确，其他均为出错
	string errorMsg = 2;	//错误描述信息
	string extraInfo = 3;	//额外信息
}

message PJResult {
	int32 code = 1; // 错误码
}

/*
 *@note 通信消息结构
 */
message PMessage {
	int32 magic = 1;		//固定为9833
	string type = 2;		//data消息结构名称，如"PResult"
	bytes data = 3;			//具体的message数据，请根据type解析
}

/*
 *@note 批量传输uuid
 */
message PManyUUID {
	repeated string ManyUUID = 1;		//一串uuid
}

/*
 *@note 批量传输errorCode
 */
message PManyErrorCode {
	repeated int32 ManyErrorCode = 1;		//一串ErrorCode
}


/*
 *@note 批量传输string
 */
message PStringList {
	repeated string List = 1;		
}

/*
 *@note 批量传输int64
 */
message PInt64List {
	repeated int64 List = 1;
}

/*
 *@note 批量传输int32
 */
message PInt32List {
	repeated int32 List = 1;
}

/*
 *@note 批量传输bool
 */
message PBoolList {
	repeated bool List = 1;
}

/*
 *@note 批量传输float64
 */
message PFloat64List {
	repeated double List = 1;
}

/*
 *@note 单独传输string
 */
message PStringSingle {
	string Val = 1;		
}

/*
 *@note 单独传输int64
 */
message PInt64Single {
	int64 Val = 1;
}

/*
 *@note 单独传输int32
 */
message PInt32Single {
	int32 Val = 1;
}

/*
 *@note 单独传输bool
 */
message PBoolSingle {
	bool Val = 1;
}

/*
 *@note 单独传输float64
 */
message PFloat64Single {
	double Val = 1;
}


/*
 *@note 带类型的二进制数据包，通过解析MsgType后再把MsgData反序列化为proto
 */
message PBinaryMsg {
	int32 MsgType = 1;
	bytes MsgData = 2;
}

/*
 *@note PBinaryMsg的列表
 */
message PBinaryMsgList {
	repeated PBinaryMsg List = 1;
}

/*
 *@note 服务健康检查项
 */
message PHealthItem {
	string name   = 1;                   //检查项名称
	int32  status = 2;                   //状态
	map<string,string> detail = 3; 
}

/*
 *@note 服务健康信息
 */
message PServiceHealth {
	int32  status = 1;                        //服务状态
	string serviceName = 2;                    //服务名                       
	repeated PHealthItem healInfoList = 3;    //健康信息
}

/*
 *@note 服务健康信息
 */
message PServiceHealthList {              
	repeated PServiceHealth list = 3;    //健康信息列表
}

/*
 *@note 服务健康状态
 */
message PServicesStatus {
	int32  status = 1;                   //服务状态
}

/*
 *@note 服务心跳信息
 */
message PServiceHeartbeatInfo {
	int64          tokenExpiration  = 1; //token有效期
	int32          status           = 2;//服务总体状态。0：所有服务正常; 1：存在服务异常
	repeated int32 abnormalIdList   = 3; //异常的服务id列表
}

// 资源类型
enum EResourceType {
    Txt         = 0; //文本
    Img         = 1; //图片
    Aud         = 2; //语音
    VideoLocal  = 3; //本地视频
    VideoOther  = 4; //第三方视频
    VideoHuge   = 5; //长视频
    Title       = 6; //标题
}

// 帖子资源信息
message PResource {
	EResourceType   Type            = 1; //资源类型
	string          Text            = 2; //文本内容,资源类型为Txt时有内容
	string          MediaObjectkey  = 3; //媒体(语音、图片、视频)的objectkey,第三方视频则填链接地址
	string          MediaUrl        = 4; //媒体(低清图片、语音、视频)完整url,客户端不填
	int64           MediaSize       = 5; //媒体长度, 单位是s
	int64           MediaExpires    = 6; //资源过期时间,目前只有语音有过期时间
	string          Des             = 7; //资源描述,目前只有图片有描述
	string          ThumbObjectkey  = 8; //缩略图的objectKey,视频帖有缩略图时,客户端要填
	string          ThumbUrl        = 9; //缩略图完整url,客户端不填
	PImageTagList   Tags            = 10; //资源标签, 目前只有图片有标签
	PImageAttr      ImageAttr       = 11; //图片属性. 宽、高、大小
	string          MediaOriginUrl  = 12; //图片原图url, 图片较小时为空,客户端不填
}

// 内容信息列表
message PResourceList {
	repeated PResource list = 1;
}

// 图片的标签信息列表
message PImageTagList {
	repeated PImageTag List = 1;
}

// 图片的标签信息
message PImageTag {
	int32 Type = 1;			// 1是标签物品，2是标签人
	int32 SubType = 2;		// 标签子类型 
	float X = 3;				// 标签x坐标相对图片的位置，百分比
	float Y = 4;				// 标签y坐标相对图片的位置，百分比
	string Name = 5;			// 标签的名称
	string GoodPrice = 6;	// 物品的价格
	string GoodLink = 7;		// 物品的链接
	string PersonUuid = 8;	// 人物的uuid
	string PersonName = 9;	// 用户的名称
}

// 图片属性
message PImageAttr {
	int32 width    = 1; //宽
	int32 high     = 2; //高
	bool  isCover  = 3; //是否作为封面. 是:true; 否:false
	int32 size     = 4; //大小,单位:Byte
}