syntax = "proto3";
package bbproto;
option java_package = "com.blemobi.sep.probuf";
option java_outer_classname = "ResultProtos";

// 通用操作结果返回
message PResult {
	int32 errorCode = 1;	//错误码：0为正确，其他均为出错
	string errorMsg = 2;	//错误描述信息
	string extraInfo = 3;	//额外信息
}

message PJResult {
	int32 code = 1; // 错误码
}

/*
 *@note 通信消息结构
 */
message PMessage {
	int32 magic = 1;		//固定为9833
	string type = 2;		//data消息结构名称，如"PResult"
	bytes data = 3;			//具体的message数据，请根据type解析
}

/*
 *@note 批量传输uuid
 */
message PManyUUID {
	repeated string ManyUUID = 1;		//一串uuid
}

/*
 *@note 批量传输errorCode
 */
message PManyErrorCode {
	repeated int32 ManyErrorCode = 1;		//一串ErrorCode
}


/*
 *@note 批量传输string
 */
message PStringList {
	repeated string List = 1;		
}

/*
 *@note 批量传输int64
 */
message PInt64List {
	repeated int64 List = 1;
}

/*
 *@note 批量传输int32
 */
message PInt32List {
	repeated int32 List = 1;
}

/*
 *@note 批量传输bool
 */
message PBoolList {
	repeated bool List = 1;
}

/*
 *@note 批量传输float64
 */
message PFloat64List {
	repeated double List = 1;
}

/*
 *@note 单独传输string
 */
message PStringSingle {
	string Val = 1;		
}

/*
 *@note 单独传输int64
 */
message PInt64Single {
	int64 Val = 1;
}

/*
 *@note 单独传输int32
 */
message PInt32Single {
	int32 Val = 1;
}

/*
 *@note 单独传输bool
 */
message PBoolSingle {
	bool Val = 1;
}

/*
 *@note 单独传输float64
 */
message PFloat64Single {
	double Val = 1;
}


/*
 *@note 带类型的二进制数据包，通过解析MsgType后再把MsgData反序列化为proto
 */
message PBinaryMsg {
	int32 MsgType = 1;
	bytes MsgData = 2;
}

/*
 *@note PBinaryMsg的列表
 */
message PBinaryMsgList {
	repeated PBinaryMsg List = 1;
}

/*
 *@note 服务健康检查项
 */
message PHealthItem {
	string name   = 1;                   //检查项名称
	int32  status = 2;                   //状态
	map<string,string> detail = 3; 
}

/*
 *@note 服务健康信息
 */
message PServiceHealth {
	int32  status = 1;                        //服务状态
	string serviceName = 2;                    //服务名                       
	repeated PHealthItem healInfoList = 3;    //健康信息
}

/*
 *@note 服务健康信息
 */
message PServiceHealthList {              
	repeated PServiceHealth list = 3;    //健康信息列表
}

/*
 *@note 服务健康状态
 */
message PServicesStatus {
	int32  status = 1;                   //服务状态
}

/*
 *@note 服务心跳信息
 */
message PServiceHeartbeatInfo {
	int64          tokenExpiration  = 1; //token有效期
	int32          status           = 2;//服务总体状态。0：所有服务正常; 1：存在服务异常
	repeated int32 abnormalIdList   = 3; //异常的服务id列表
}



