syntax = "proto3";
package bbproto;
option java_package = "com.blemobi.sep.probuf";
option java_outer_classname = "RobotProtos";

import "account.proto";
import "notification.proto";
import "news.proto";
import "datapublishing.proto";

// 推送消息类型
enum ERobotPushType {
    Regards     = 0; // 消息推送
    Remind      = 1; // 生日提醒
    Lottery     = 2; // 抽奖
    RedPacket   = 3; // 红包
    Stream      = 4; // 直播
}

// 推送消息状态
enum ERobotMsgState {
    UnRead     = 0; // 未读
    Read       = 1; // 已读
}

// 网红创建的推送消息
message PBRegards {
	int64 id                = 1;  //消息ID,客户端不填
	string from             = 2;  //网红用户ID,客户端不填
	repeated PUserBase to   = 3;  //条件筛选时不填.精确选择时只填uuid.
	PFansFilterParam Filter = 4;  //粉丝筛选条件,精确选择时条件为空
	int32  fansNum          = 5;  //消息推送的粉丝数,客户端不填
	string Text             = 6;  //消息文本,最大长度140
	PAudio audio            = 7;  //消息语音,语音最大时长60
	PImage image            = 8;  //消息图片
	int64 createTime        = 9;  //创建时间,客户端不填
}

// 网红创建的推送消息
message PBRegardsList {
	repeated PBRegards list = 1;
}

// 网红创建的生日提醒消息
message PBRemind {
	int64 id                    = 1;   //消息ID,客户端不填.如果消息未发送ID则为0
	int32 state                 = 2;   //客户端不填.发送状态:0:待发送; 1:已过时间,已发送;2:已过时间,未发送
	string from                 = 3;   //网红用户ID,客户端不填
	PUserBase to                = 4;   //提醒的目标用户uuid. 默认提醒时不填. 
	string srcType              = 5;   //消息类型 text, audio
	string Text                 = 6;   //文本,最大长度140
	PAudio audio                = 7;   //语音,语音最大时长30
	int64  brithday             = 8;   //生日日期,客户端不填
}

// 网红创建的生日提醒消息模板
message PBRemindTpl {
	//int64 brithday            = 1;   //生日日期,模板ID
	string srcType              = 2;   //消息类型 text, audio
	string Text                 = 3;   //文本,最大长度140
	PAudio audio                = 4;   //语音,语音最大时长30
}

// 网红创建的生日提醒消息列
message PBRemindList {
	repeated PBRemind list = 1; //提醒消息列表
}

// 用于redis存储
message PBRawMsg {
    ERobotPushType    msgType = 1; //消息类型
	PBRegards         regards   = 2; //推送消息
	PBRemind          remind    = 3; //生日提醒消息
}


// 机器人全局设置
message PCRobotGlobalSetting {
	bool robotEnable       = 1;  //机器人总开关	
	bool regardsRemind     = 2;  //是否接收生日提醒和消息推送	
	bool regardsEnable     = 3;  //是否接收消息推送
	bool remindEnable      = 4;  //是否接收生日提醒	
	int64 skin             = 5;  //皮肤类型.0:女; 1:男
}

// 粉丝收到的消息推送
message PCPushRegards {
	string Text      = 1;    //消息文本,最大长度140
	PAudio audio     = 2;    //消息语音,语音最大时长60
	PImage image     = 3;    //消息图片
}

// 粉丝收到的提醒消息
message PCPushRemind {
	string srcType              = 1;   //消息类型 text, audio
	string Text                 = 2;   //文本,最大长度140
	PAudio audio                = 3;   //语音,语音最大时长30
}


// 粉丝收到的抽奖消息
message PCPushLottery {
	//抽奖参数...
}

// 粉丝收到的红包消息
message PCPushRedPacket {
	//红包参数...
}

// 粉丝收到的消息
message PCRobotPushMsg {
	int64              id        = 1; //消息ID
	int64              time      = 2; //消息发送时间
	ERobotPushType     msgType   = 3; //消息类型
	ERobotMsgState     state     = 4; //消息状态
	PUserBase          from      = 5; //网红用户信息
	PCRobotPushRawMsg   content  = 6; //各类型消息
}

// 粉丝收到的消息
message PCRobotPushRawMsg {
	PCPushRegards     regards   = 1; //推送消息
	PCPushRemind      remind    = 2; //生日提醒消息
	PCPushLottery     lottery   = 3; //抽奖消息
	PCPushRedPacket   redPacket = 4; //红包消息
	PNotifyStreaming streaming  = 5; //直播提醒消息
}

// 粉丝收到的消息列表
message PCRobotPushMsgList {
	repeated PCRobotPushMsg list = 1;
}

// 各类型消息数
message PCRobotMsgCount {
	ERobotPushType type     = 1;  //类型 ERobotPushType
	int32          count    = 2;  //数目
}

// 气泡消息队列
message PCRobotBubble {
   ERobotPushType             type     = 1;  //类型 ERobotPushType
   int32                      count    = 2;  //数目
   repeated PCRobotPushMsg    list     = 3; //消息内容

}

// 心跳轮询推送信息汇总
message PCRobotSummary {
    int32                  totalNum        = 1; // 消息总数, 如果-1客户端则忽略响应
    int32                  unReadNum       = 2; // 消息未读数, 如果-1客户端则忽略响应
    int32                  nextDelay       = 3; // 下次轮询的间隔时间(秒).0表示不等待.
    repeated PCRobotBubble bubbleList      = 4; // 气泡消息列表
}

// 用户关注的网红信息
message PCCelebrity {
    PUserBase       user         = 1; //用户信息
    PUserBase       belongVo     = 2; //所属VO信息
    ERobotMsgState  msgState     = 3; //是否有未读消息
}

// 用户关注的网红列表
message PCCelebrityGroup {
    string   group            = 1;  //分组, A-Z
    repeated PCCelebrity list = 2;  //组内网红信息
}

// 用户关注的网红列表
message PCCelebrityGroupList {
    repeated PCCelebrityGroup list = 1;
}

// 网红消息数限制
message PBMsgNumLimit {
    int32 total      = 1;  //总数
    int32 remain     = 2;  //剩余数
}

/*
 *@note B端:网红创建推送消息
 *@path /v1/robot/regards
 *@method POST
 *@cookie token&uuid
 *@body PBRegards 消息数据
 *@return PResult
 */

 /*
 *@note B端:网红查看已创建的推送消息
 *@path /v1/robot/regards/history
 *@method GET
 *@cookie token&uuid
 *@param pageindex 页序号.从0开始,默认0.
 *@param pagesize  每页消息条数。默认30,最大100
 *@return 成功返回PBRegardsList,失败返回PResult
 */

 /*
 *@note B端:网红删除已创建的推送消息
 *@path /v1/robot/regards/history
 *@method DELETE
 *@cookie token&uuid
 *@param ids 待删除的消息ID,多个以逗号分隔.最多50个 
 *@return PResult
 */

 /*
 *@note B端:查询剩余可发消息数
 *@path /v1/robot/regards/limit
 *@method GET
 *@cookie token&uuid
 *@return 成功返回PBMsgNumLimit,失败返回PResult
 */

/*
 *@note B端:网红设置生日提醒
 *@path /v1/robot/remind
 *@method POST
 *@cookie token&uuid
 *@body   PBRemind 消息数据
 *@return 返回PResult
 */

 /*
 *@note B端:查询已设置的默认提醒(如果没有设置过,srcType内容为空)
 *@path /v1/robot/remind/setting
 *@method GET
 *@cookie token&uuid
 *@return 成功返回PBRemind,失败返回PResult
 */

 /*
 *@note B端:切换默认提醒样式(文本/语音, 最小操作间隔:2秒)
 *@path /v1/robot/remind/setting/exchange
 *@method PUT
 *@cookie token&uuid
 *@param  srctype    文本: text; 语音:audio.默认: text
 *@return 成功返回PBRemind,失败返回PResult
 */

 /*
 *@note B端:查询未来7天(或历史)的提醒列表
 *@path /v1/robot/remind
 *@method GET
 *@cookie token&uuid
 *@param pageindex 页序号.从0开始,默认0.
 *@param pagesize  每页消息条数。默认30,最大100
 *@param  type    查询类型: future, history.默认:future
 *@return 成功返回PBRemindList,失败返回PResult
 */

 /*
 *@note B端:删除提醒消息
 *@path /v1/robot/remind
 *@method DELETE
 *@cookie token&uuid
 *@param  id      提醒消息id
 *@return 返回PResult
 */

/*
 *@note C端:机器人全局设置
 *@path /v1/robot/setting/global
 *@method PUT
 *@cookie token&uuid
 *@param  value  0:关闭; 1:打开;皮肤编号 
 *@param  type   类型.消息推送: regards; 生日提醒: remind; 消息和生日提醒: regardsremind. 整个机器人: robot; 皮肤:skin
 *@return PResult
 */

 /*
 *@note C端:查询机器人全局设置
 *@path /v1/robot/setting/global
 *@method GET
 *@cookie token&uuid
 *@return 成功返回PCRobotGlobalSetting,失败返回PResult
 */

 /*
 *@note C端: 设置针对某个网红的开关
 *@path /v1/robot/setting/personnal
 *@method PUT
 *@cookie token&uuid
 *@param  oper    0:关闭; 1:打开  
 *@param  uuids   网红用户ID列表,多个以逗号分隔.最多50个.
 *@return PResult
 */

 /*
 *@note C端: 查询针对某个网红的开关
 *@path /v1/robot/setting/personnal
 *@method GET
 *@cookie token&uuid
 *@param  uuids   网红用户ID列表,多个以逗号分隔.最多50个.
 *@return 成功返回PInt32List,失败返回PResult
 */

 /*
 *@note C端: 长轮询查询机器人消息(如果超时,客户端立即重发.)
 *@uri /v1/robot/message
 *@method GET
 *@cookie token&uuid
 *@return 成功返回PCRobotSummary 
 */

 /*
 *@note C端: 推送消息列表首页
 *@path /v1/robot/message/home
 *@method GET
 *@cookie token&uuid
 *@param pageindex 页序号.从0开始,默认0.
 *@param pagesize  每页消息条数。默认30,最大100  
 *@return 成功返回PCRobotPushMsgList,失败返回PResult
 */

 /*
 *@note C端: 设置消息的状态
 *@path /v1/robot/message/state
 *@method PUT
 *@cookie token&uuid
 *@param  state    已读:0; 未读: 1; 全部已读:2
 *@body PStringList 消息ID列表的序列化数据. 设置全部时,body可以为空
 *@return PResult
 */

 /*
 *@note C端: 设置来自指定网红消息的状态全部已读
 *@path /v1/robot/message/state/personnal
 *@method PUT
 *@cookie token&uuid
 *@param  uuid    网红用户ID
 *@return PResult
 */

/*
 *@note C端: 查询来自指定网红的消息列表
 *@path /v1/robot/message/personnal
 *@method GET
 *@cookie token&uuid
 *@param  uuid    网红的用户ID
 *@param pageindex 页序号.从0开始,默认0.
 *@param pagesize  每页消息条数。默认30,最大100
 *@return 成功返回PCRobotPushMsgList,失败返回PResult
 */

/*
 *@note C端: 查询用户关注的网红列表
 *@path /v1/robot/celebrity
 *@method GET
 *@cookie token&uuid
 *@return 成功返回PCCelebrityList,失败返回PResult
*/

/*
 *@note C端: 搜索用户关注的网红
 *@path /v1/robot/celebrity/search
 *@method GET
 *@cookie token&uuid
 *@param keyword 关键词
 *@return 成功返回PCCelebrityList,失败返回PResult
*/

/*
 *@note 访问获取带签名的文件上传URL
 *@path /v1/robot/uploadfileurl
 *@method GET
 *@param digest 要上传的文件的md5 hexstring
 *@param length 文件大小，字节
 *@param extension 扩展名 如jpg,png,gif,bmp,mp3,apk等
 *@return 成功返回PUpload，失败返回PResult
 */
