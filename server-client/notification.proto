syntax = "proto3";
package common;
option java_package = "com.blemobi.demo.probuf";
option java_outer_classname = "NotificationProtos";

import "news.proto";
import "comment.proto";

/*
推送消息类型，
comment_news 	// 帖子评论
comment_comment // 评论回复
comment_vote 	// 评论投票
social_accept 	// 好友申请
news_follow 		// 关注我
news_upvote 		// 帖子点赞
*/



/*=====================================*/
//结构定义

message SimpleUser {
  /*保留1~5用于扩展*/ 
  string uuid = 6;        		// 服务端标志用户的唯一id
  string username = 7;     	 	// 用户名，唯一
  string nickname = 8;      	// 昵称
  string headImgURL = 9;     	// 头像地址
}

// 帖子评论通知消息
message NotifyComment {
  int64 messageId = 1; 		//消息id 
  SimpleUser commentUser = 2;	//评论的用户
  PComment comment = 3;		//评论
  PArticle article = 4; 	//评论相关的news
  int64 time = 5;		//评论的时间
  int32 status = 6; 		//0：未读；1：已读
}

// 帖子评论通知消息列表
message NotifyCommentList {
  repeated NotifyComment list = 1; //NotifyComment列表
}

// 评论回复通知消息
message NotifyCommentReply {
  int64 messageId = 1; 		//消息id 
  SimpleUser commentUser = 2;	//评论的用户
  PComment comment = 3;		//被回复的评论
  PComment reply = 4;		//回复的内容
  int64 time = 5;		//回复的时间
  int32 status = 6; 		//0：未读；1：已读
}

// 评论回复通知消息列表
message NotifyCommentReplyList {
  repeated NotifyCommentReply list = 1; //NotifyCommentReply列表
}

// 评论投票通知消息
message NotifyCommentVote {
  int64 messageId = 1; 		//消息id 
  SimpleUser voteUser = 2;	//投票的用户
  PComment comment = 3;		//被投票的评论
  PArticle article = 4; 	//被投票评论相关的news
  int64 time = 5;		//投票的时间
  int32 voteType = 6; 		//0：赞；1：踩
  int32 status = 7; 		//0：未读；1：已读
}

// 评论投票通知消息列表
message NotifyCommentVoteList {
  repeated NotifyCommentVote list = 1; //NotifyCommentVote列表
}

// 好友申请通知消息
message NotifySocial {
  int64 messageId = 1; 		//消息id 
  SimpleUser socialUser = 2;	//申请好友或接受好友的用户
  int64 time = 3;		//申请好友或接受好友的时间
  int32 socialType = 4; 	//0：申请好友；1：接受好友申请；2：拒绝好友申请
  int32 status = 5; 		//0：未读；1：已读
}

// 好友申请通知消息列表
message NotifySocialList {
  repeated NotifySocial list = 1; //NotifySocial列表
}

//关注通知消息
message NotifyFollow {
  int64 messageId = 1;			//消息id 
  SimpleUser followUser = 2; 	//关注我的用户
  int64 time = 3; 				//关注的时间
  int32 followship = 4;      	//两用户间的关系、0:无关系，1,：是粉丝，2：已关注，3：相互关注
  int32 status = 5; 			//0：未读；1：已读
}

//关注通知消息列表
message NotifyFollowList {
  repeated NotifyFollow list = 1; //NotifyFollow列表，最多50个
}

//点赞通知信息
message NotifyNewsVote {
  int64 messageId = 1;		//消息id 
  SimpleUser voteUser = 2; 	//点赞的用户
  PArticle article = 3; 	//点赞的news
  int64 time = 4;   		//点赞时间
  int32 status = 5; 		//0：未读；1：已读
}

//点赞通知信息列表
message NotifyNewsVoteList {
  repeated NotifyNewsVote list = 1; //NotifyNewsVote列表，最多50个  
}

// 推送消息的个数
message PMsgCount {
	string Type = 2;
	int64 Count = 3;
}

// 推送消息个数列表
message PMsgCountList {
	repeated PMsgCount MsgCount = 2;
}

// 消息id列表
message PMsgIDList {
	repeated string MsgID = 2;
}

/*=====================================*/
//API定义

/*
 *@note 获取某个类型的推送消息
 *@path /v1/notification/msg
 *@method GET
 *@url param msg_type 见 '推送消息类型'
 *@url param get_type 0为取未读的消息，1为已读的消息，2为所有的消息
 *@url param msg_id 标志从哪一个消息开始获取，-1为拉取最新的通知消息，如果msg_id不存在，则从附近小于msg_id获取，直到为0
 *@url param count 获取的数量，最大值为50
 *@cookie token&uuid
 *@return 见各个类型的推送消息定义的结构
 */

/*
 *@note 删除某个类型的推送消息
 *@path /v1/notification/msg/delete
 *@method POST
 *@url param msg_type 见 '推送消息类型'
 *@body PMsgIDList
 *@cookie token&uuid
 *@return PResult 
 */

/*
 *@note 设置某个推送消息为未读状态或已读状态
 *@path /v1/notification/msg/status
 *@method POST
 *@url param msg_type 见 '推送消息类型'
 *@url param status 0为未读，1为已读
 *@body PMsgIDList
 *@cookie token&uuid
 *@return PResult
 */

/*
 *@note 获取某个/所有推送消息的个数
 *@path /v1/notification/msg/count
 *@method GET
 *@url param msg_type 见 '推送消息类型'，取所有类型的填all
 *@url param get_type 0为取未读的消息，1为已读的消息，2为所有的消息
 *@cookie token&uuid
 *@return 成功返回MsgCounts，失败返回PResult
 */
