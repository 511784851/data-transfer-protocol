syntax = "proto3";
package bbproto;
option java_package = "com.blemobi.sep.probuf";
option java_outer_classname = "NotificationProtos";

import "news.proto";
import "comment.proto";
import "account.proto";
import "streaming.proto";

/*
推送消息类型，
comment_news 		// 帖子评论
comment_comment 	// 评论回复
comment_vote 		// 评论投票
social_accept 		// 好友申请
news_follow 		// 关注我
news_upvote 		// 帖子点赞
news_at         	// 帖子@用户
community_invite	// 社区邀请
streaming           // 第三方提醒
achievement         // 达成成就
task                // 游戏化任务
achievement_task    // 达成成就 和 游戏化任务
*/

/*=====================================*/
//结构定义

message SimpleUser {
  /*保留1~4用于扩展*/ 
  int32 level = 5;		    // 用户等级
  string uuid = 6;        	// 服务端标志用户的唯一id
  string username = 7;     	// 用户名，唯一
  string nickname = 8;      // 昵称
  string headImgURL = 9;    // 头像地址
}

// 帖子评论通知消息
message NotifyComment {
  int64 messageId = 1; 		    //消息id 
  SimpleUser commentUser = 2;	//评论的用户
  PComment comment = 3;		    //评论
  PPostInfo article = 4; 	    //评论相关的news
  int64 time = 5;		        //评论的时间
  int32 status = 6; 		    //0：未读；1：已读
}

// 帖子评论通知消息
message NotifyCommentExt {
  int64 messageId = 1; 		//消息id 
  SimpleUser commentUser = 2;	//评论的用户
  PCommentExt commentExt = 3;	//评论
  PPostInfo article = 4; 	//评论相关的news
  int64 time = 5;		//评论的时间
  int32 status = 6; 		//0：未读；1：已读
}

// 帖子评论通知消息列表
message NotifyCommentList {
  repeated NotifyComment list = 1; //NotifyComment列表
}

// 帖子评论通知消息列表
message NotifyCommentExtList {
  repeated NotifyCommentExt list = 1; //NotifyCommentExt列表
}

// 评论回复通知消息
message NotifyCommentReply {
  int64 messageId = 1; 		//消息id 
  SimpleUser commentUser = 2;	//评论的用户
  PCommentExt commentExt = 3;	//被回复的评论
  PCommentExt replyExt = 4;	//回复的内容
  int64 time = 5;		//回复的时间
  int32 status = 6; 		//0：未读；1：已读
  SimpleUser replyUser = 7;	//被回复评论的用户
  PPostInfo article = 8; 	//评论相关的news
}

// 评论回复通知消息列表
message NotifyCommentReplyList {
  repeated NotifyCommentReply list = 1; //NotifyCommentReply列表
}

// 评论投票通知消息
message NotifyCommentVote {
  int64 messageId = 1; 		//消息id 
  SimpleUser voteUser = 2;	//投票的用户
  PComment comment = 3;		//被投票的评论
  PPostInfo article = 4; 	//被投票评论相关的news
  int64 time = 5;		//投票的时间
  int32 voteType = 6; 		//0：赞；1：踩
  int32 status = 7; 		//0：未读；1：已读
}

// 评论投票通知消息
message NotifyCommentVoteExt {
  int64 messageId = 1; 		//消息id 
  SimpleUser voteUser = 2;	//投票的用户
  PCommentExt commentExt = 3;	//被投票的评论
  PPostInfo article = 4; 	//被投票评论相关的news
  int64 time = 5;		//投票的时间
  int32 voteType = 6; 		//0：赞；1：踩
  int32 status = 7; 		//0：未读；1：已读
}

// 评论投票通知消息列表
message NotifyCommentVoteList {
  repeated NotifyCommentVote list = 1; //NotifyCommentVote列表
}

// 好友申请通知消息
message NotifySocial {
  int64 messageId = 1; 		//消息id 
  SimpleUser socialUser = 2;	//申请好友或接受好友的用户
  int64 time = 3;		//申请好友或接受好友的时间
  int32 socialType = 4; 	//0：申请好友；1：接受好友申请；2：拒绝好友申请
  int32 status = 5; 		//0：未读；1：已读
  // socialRelation 当前好友关系: A(自己), B(对方)
  // 0：A --- B (A 和 B 完全没关系)
  // 1: A --> B (A 向 B 申请好友，B 还未接受)
  // 2: A <-- B (B 向 A 申请好友，A 还未接受)
  // 3: A <-> B (B 与 A 是好友)
  int32 socialRelation = 6;
  string notifyUUID = 7;	// 被通知用户的uuid
}

// 好友申请通知消息列表
message NotifySocialList {
  repeated NotifySocial list = 1; //NotifySocial列表
}

//关注通知消息
message NotifyFollow {
  int64 messageId = 1;			//消息id 
  SimpleUser followUser = 2; 	//关注我的用户
  int64 time = 3; 				//关注的时间
  int32 followship = 4;      	//两用户间的关系、0:无关系，1,：是粉丝，2：已关注，3：相互关注
  int32 status = 5; 			//0：未读；1：已读
}

//关注通知消息列表
message NotifyFollowList {
  repeated NotifyFollow list = 1; //NotifyFollow列表，最多50个
}

//点赞通知信息
message NotifyNewsVote {
  int64 messageId = 1;		//消息id 
  SimpleUser voteUser = 2; 	//点赞的用户
  PPostInfo article = 3; 	//点赞的news
  int64 time = 4;   		//点赞时间
  int32 status = 5; 		//0：未读；1：已读
}

//点赞通知信息列表
message NotifyNewsVoteList {
  repeated NotifyNewsVote list = 1; //NotifyNewsVote列表，最多50个  
}

message NotifyNewsAt {
  int64 messageId  = 1; //消息id
  PPostInfo article = 2; //帖子
  int64 time       = 3; //发帖时间
  int32 status     = 4; //0：未读；1：已读
}

//帖子@通知信息列表
message NotifyNewsAtList {
  repeated NotifyNewsAt list = 1; //NotifyNewsAt列表，最多50个  
}

// 社区邀请通知消息
message PNotifyCommunityInvite {
	int64 messageId = 1;		// 消息id 
	int64 time = 2; 			// 邀请的时间
	int32 status = 3; 			// 0：未读；1：已读
	int64 communityId = 4; 	// 邀请加入的社区的id
	string communityName = 5; 	// 社区名字
	PUserBase User = 6; 		// 邀请我的用户
}

// 社区邀请通知消息列表
message PNotifyCommunityInviteList {
  repeated PNotifyCommunityInvite list = 1; // PNotifyCommunityInvite 列表
}

// 推送消息的个数
message PMsgCount {
	string Type = 2;
	int64 Count = 3;
}

// 推送消息个数列表
message PMsgCountList {
	repeated PMsgCount MsgCount = 2;
}

// 消息id列表
message PMsgIDList {
	repeated string MsgID = 2;
}

message PNotifySetting {
	bool mute = 1;
}

// 第三方直播消息
message PStreamingMsg {
  string messageId = 1; //消息id
  PStreamingLiveList lives = 2; //直播内容
}

// 第三方直播消息列表
message PStreamingMsgList {
  repeated PStreamingMsg list = 1;
}

message PGameMsg {
	//消息id 
	int64 messageId = 1;
	
	//达成时间
	int64 time = 2;
	
	string uuid = 3;
	string nickname = 4;
	
	//是否好友
	bool isFriend = 5;
	
	//0表示PAchievementMsg，1表示PTaskMsg
	int32 tp = 6; 
	
	//成就部分定义，占用7~10
	//成就名称
	string achievementName = 10;
	
	//任务部分定义，从11开始
	//...
	
	int32 level = 11; // 等级
	string levelNmae = 12;// 等级名称
	
	int32 status = 20;  //状态(0:未读,1:已读)
}

//成就达成通知消息列表
message PGameMsgList {
	  repeated PGameMsg list = 1;
}


/*=====================================*/
//API定义

/*
 *@note 获取某个类型的推送消息
 *@path /v1/notification/msg
 *@method GET
 *@url param msg_type 见 '推送消息类型'
 *@url param get_type 0为取未读的消息，1为已读的消息，2为所有的消息
 *@url param msg_id 标志从哪一个消息开始获取，-1为拉取最新的通知消息，如果msg_id不存在，则从附近小于msg_id获取，直到为0
 *@url param count 获取的数量，最大值为50
 *@cookie token&uuid
 *@return 见各个类型的推送消息定义的结构
 */

/*
 *@note 删除某个类型的推送消息
 *@path /v1/notification/msg/delete
 *@method POST
 *@url param msg_type 见 '推送消息类型'
 *@body PMsgIDList
 *@cookie token&uuid
 *@return PResult 
 */

/*
 *@note 设置某个推送消息为未读状态或已读状态
 *@path /v1/notification/msg/status
 *@method POST
 *@url param msg_type 见 '推送消息类型'
 *@url param status 0为未读，1为已读
 *@body PMsgIDList 如果body为空，则表示所有的MsgID，只能全部设为已读，不能全部设为未读
 *@cookie token&uuid
 *@return PResult
 */

/*
 *@note 获取某个/所有推送消息的个数
 *@path /v1/notification/msg/count
 *@method GET
 *@url param msg_type 见 '推送消息类型'，取所有类型的填all
 *@url param get_type 0为取未读的消息，1为已读的消息，2为所有的消息
 *@cookie token&uuid
 *@return 成功返回MsgCounts，失败返回PResult
 */

/*
 *@note 获取设置信息
 *@path /v1/notification/msg/setting
 *@method GET
 *@cookie token&uuid
 *@return 成功返回PSetting，失败返回PResult
 */

/*
 *@note 设置设置信息
 *@path /v1/notification/msg/setting
 *@method POST
 *@body PSetting
 *@cookie token&uuid
 *@return 返回PResult
 */

/*
 *@note 添加推送消息(只用于水军压力测试,真实客户端可以不用管)
 *@path /v1/notification/test/inside/msg
 *@method POST
 *@param from 服务调用者
 *@body PPushMsg
 *@return 返回int32错误码
 */

// *********** v2 ************

// 通知类型，具体的消息类型
enum ENotifyType {
    // 我的通知

    CommentNews     = 0; // 评论帖子
    CommentComment  = 1; // 评论评论
    CommentVote     = 2; // 评论赞
    NewsFollow      = 3; // 关注
    NewsVote        = 4; // 帖子点赞
    NewsAt          = 5; // @我
    SocialAccept    = 6; // 接受好友申请
    CommentDownVote = 7; // 评论踩

    // 系统通知

    CommunityAdminPromotion = 100; // 社区提升管理员
    MyTask                  = 101; // 我的任务（等级提升）
    MyAchievement           = 102; // 我的成就（获得成就）
    RealNameAuthSuccess     = 103; // 实名认证通过
    Streaming               = 104; // 第三方直播-正在直播
    CommunityAdminRevoke    = 105; // 社区取消管理员资格
    CommunityVippPromotion  = 106; // 社区任命VIP+
    CommunityVippRevoke     = 107; // 社区取消VIP+
    CommunityKickedOut      = 108; // 社区踢出会员
    RealNameAuthFailed      = 109; // 实名认证失败
    StreamingSoon           = 110; // 第三方直播-即将直播

    SocialApply     = 200; // 好友申请
    CommunityInvite = 201; // 社区邀请

    // 任务成就

	AchievementBroadcast = 300; // 成就通知给其它人（好友或粉丝）
    TaskBroadcast        = 301; // 等级提升通知其他人 (好友或粉丝)
}

// 通知消息状态，已读/未读
enum ENotifyState {
    Unread  = 0; // 未读
    Readed  = 1; // 已读
    Deleted = 2; // 删除

    // 以下状态说明这条消息已经是已读状态（客户端判断时判断状状态大于等于1说明消息已读）
    Action1 = 3; // 动作状态（一般作为接受请求）
    Action2 = 4; // 动作状态（一般作为拒绝请求）
}

// 通知分类
enum ENotifyCategory {
    Notification       = 0; // 通知
    MyNotification     = 1; // 我的通知
    SysNotification    = 2; // 系统通知
    SocialRequest      = 3; // 好友请求
    CommunityRequest   = 4; // 社区请求
    TaskAndAchievement = 5; // 任务成就系统通知
}

// 评论帖子消息定义
message PNotifyComment {
    PPostInfo article    = 1; // 评论相关的news
    PCommentExt comment  = 2; // 评论
}

// 评论回复通知消息
message PNotifyCommentReply {
  PPostInfo   article    = 1; // 评论相关的news
  PCommentExt commentExt = 2; // 被回复的评论
  PCommentExt replyExt   = 3; // 回复的内容
}

// 好友申请通知消息
message PNotifySocial {
  // 0: 申请好友，1: 接受申请，2: 拒绝申请
  int32 state = 1;
}

// 评论投票通知消息
message PNotifyCommentVote {
  int32       type       = 1; // 0：赞；1：踩
  PPostInfo   article    = 2; // 被投票评论相关的news
  PCommentExt commentExt = 3; // 被投票的评论
}

// 帖子点赞通知信息
message PNotifyNewsVote {
  int32     type    = 1; // 0：赞；1：踩（当前只有赞）
  PPostInfo article = 2; // 帖子
}

// 帖子@我
message PNotifyNewsAt {
  PPostInfo article = 1; // 帖子
}

// 第三方直播提醒
message PNotifyStreaming {
  PStreamingLiveList lives = 1; //直播内容
}

// 社区
message PNotifyCommunity {
	string id     = 1; // 社区的id
	string name   = 2; // 社区名字
}

// 自定义消息
message PNotifyRawMessage {
    string                  content         = 1;  // 服务端国际化(成就名称、等级名称等)

    PNotifyComment          commentNews     = 5;  // 帖子评论消息
    PNotifyCommentReply     commentReply    = 6;  // 评论的评论
    PNotifySocial           socialApply     = 7;  // 好友请求
    PNotifyCommentVote      commentVote     = 8;  // 评论赞/踩
    PNotifyNewsVote         newsVote        = 9;  // 帖子赞/踩
    PNotifyNewsAt           newsAt          = 10; // @我
    PNotifyStreaming        streaming       = 11; // 第三方直播提醒
    PNotifyCommunity        community       = 12; // 社区通知/社区邀请
}

// 通知消息，服务端发送的消息和客户端收到的消息结构
message PNotifyMessage {
    ENotifyType        type  = 1;  // 消息类型
    ENotifyState       state = 2;  // 消息状态
    int64              time  = 3;  // 消息生成时间
    string             ID    = 4;  // 消息ID
    PUserBase          from  = 5;  // 消息来源用户属性
    map<string,string> args  = 6;  // 通知参数（服务内部使用）

    // 自定义消息，20以前保留扩展
    PNotifyRawMessage content = 20; // 各服务自定义消息
}

// 通知消息列表
message PNotifyMessageList {
    repeated PNotifyMessage list = 1; // 消息列表
}

// 通知首页分类消息概要
message PNotifySummary {
    ENotifyCategory         category    = 1; // 通知分类，通知、好友请求、社区请求
    repeated PNotifyMessage messageList = 2; // 消息列表，最新收到的N消息，N具体跟需求定
}

// 通知首页分类消息列表
message PNotifySummaryList {
    repeated PNotifySummary list = 1; // 分类消息概要，客户端按照顺序显示消息概要
}

/*
 *@note 获取通知消息
 *@uri /v2/notification/messages
 *@method GET
 *@urlParam category 通知分类：1:我的通知、2:系统通知、3:好友请求、4:社区请求、5:成就
 *@urlParam offset 分页偏移值，从0开始
 *@urlParam count 获取的数量，最大值20
 *@urlParam uuid 获取uuid对应用户的数据
 *@cookie token&uuid
 *@return *PNotifyMessageList
 */

/*
 *@note 更新通知消息状态
 *@uri /v2/notification/messages
 *@method PUT
 *@urlParam state 更新状态0: 未读，1: 已读，2: 删除，3: 动作状态（接受），4: 动作状态（拒绝）
 *@urlParam uuid 获取uuid对应用户的数据
 *@body PStringList 需要更新的消息ID列表
 *@cookie token&uuid
 *@return *PResult
 */

/*
 *@note 清空某一分类下面的通知
 *@uri /v2/notification/messages
 *@method POST
 *@urlParam category 通知分类：1:我的通知、2:系统通知、3:好友请求、4:社区请求、5:任务成就
 *@urlParam uuid 获取uuid对应用户的数据
 *@cookie token&uuid
 *@return *PResult
 */

/*
 *@note 获取通知消息设置
 *@uri /v2/notification/settings
 *@method GET
 *@urlParam uuid 获取uuid对应用户的数据
 *@cookie token&uuid
 *@return *PNotifySetting
 */

/*
 *@note 设置通知消息设置
 *@uri /v2/notification/settings
 *@method POST
 *@urlParam uuid 获取uuid对应用户的数据
 *@body *PNotifySetting 通知消息设置
 *@cookie token&uuid
 *@return *PResult
 */

/*
 *@note 通知首页
 *@uri /v2/notification/home
 *@method GET
 *@urlParam uuid 获取uuid对应用户的数据
 *@cookie token&uuid
 *@return *PNotifySummaryList
 */

/*
 *@note 通知状态（是否存在未读消息，小红点）
 *@uri /v2/notification/state
 *@method GET
 *@urlParam category 如果是成就系统传5，否则不传
 *@urlParam uuid 获取uuid对应用户的数据
 *@cookie token&uuid
 *@return *PInt32Single 0: 不存在未读消息，1: 存在未读消息
 */
