syntax = "proto3";
package common;
option java_package = "com.blemobi.demo.probuf";
option java_outer_classname = "NotificationProtos";

import "news.proto";

/*
推送消息类型，
comment_news 	// 帖子评论
comment_comment // 评论回复
comment_vote 	// 评论投票
social_accept 	// 好友申请
news_follow 		// 关注我
news_upvote 		// 帖子点赞
*/



/*=====================================*/
//结构定义

message SimpleUser {
  /*保留1~5用于扩展*/ 
  string uuid = 6;        		// 服务端标志用户的唯一id
  string username = 7;     	 	// 用户名，唯一
  string nickname = 8;      	// 昵称
  string headImgURL = 9;     	// 头像地址
}

//关注通知消息
message NotifyFollow {
  int64 messageId = 1;			//消息id 
  SimpleUser followUser = 2; 	//关注我的用户
  int64 time = 3; 				//关注的时间
  int32 followship = 4;      	//两用户间的关系、0:无关系，1,：是粉丝，2：已关注，3：相互关注
  int32 status = 5; 			//0：未读；1：已读
}

//关注通知消息列表
message NotifyFollowList {
  repeated NotifyFollow list = 1; //NotifyFollow列表，最多50个
}

//点赞通知信息
message NotifyNewsVote {
  int64 messageId = 1;		//消息id 
  SimpleUser voteUser = 2; 	//点赞的用户
  PArticle article = 3; 	//点赞的news
  int64 time = 4;   		//点赞时间
  int32 status = 5; 		//0：未读；1：已读
}

//点赞通知信息列表
message NotifyNewsVoteList {
  repeated NotifyNewsVote list = 1; //NotifyNewsVote列表，最多50个  
}


/*=====================================*/
//API定义

/*
 *@note 获取某个类型的推送消息
 *@path /v1/notification/msg
 *@method GET
 *@param msg_type 见 '推送消息类型'
 *@param get_type 0为取未读的消息，1为已读的消息，2为所有的消息
 *@param offset 大于等于0
 *@param count 获取的数量，最大值为100
 *@cookie token&uuid
 *@return 见各个类型的推送消息定义的结构
 */

/*
 *@note 删除某个类型的推送消息
 *@path /v1/notification/msg
 *@method DELETE
 *@param msg_type 见 '推送消息类型'
 *@param msg_id 推送消息id
 *@cookie token&uuid
 *@return 见各个类型的推送消息定义的结构
 */

/*
 *@note 设置某个推送消息为已读状态
 *@path /v1/notification/msg/read
 *@method GET
 *@param msg_type 见 '推送消息类型'
 *@param msg_id 推送消息id
 *@cookie token&uuid
 *@return 见各个类型的推送消息定义的结构
 */