syntax = "proto3";
package common;
option java_package = "com.blemobi.sep.probuf";
option java_outer_classname = "ChatProtos";

import "account.proto";

message PWkToken {
	string appAccessToken = 1;     // 应用appAccessToken
	string domain = 2;	           // 应用domain
	string appKey = 3;	           // 应用appKey
	int64 openId = 4;	           // 用户openId
	string nonce = 5;	           // 随机数
	int64 timestamp = 6;	       // 时间戳
	string signature = 7;          // 签名串，用于登录阿里悟空的凭证，每个signature的有效期为5分钟
}

message PConversation {
	string conversationId = 1;     // 会话ID
	int64 openId = 2;              // 会话创建者
	int32 type = 3;                // 会话类型
	string icon = 4;               // 会话图标url地址
	string title = 5;	           // 会话名称
	int64 tag = 6;	               // 会话tag：0-可以聊天，1-不能聊天（已不是好友关系）
	int32 memberLimit = 7;         // 群成员数
    int32 superGroup = 8;	       // 0非大群，1大群  
    string parentId = 9;           // 父会话id，默认0
    int32 nodeType = 10;           // 是否 父会话，0-否，默认；1-是父会话
    repeated int64 members = 11;   // 会话的成员列表openId
}

message PJoinRoom {
	int64 code = 1;                // 状态吗
	string oldRoomId = 2;          // 旧的聊天室ID
	string oldRoomName = 3;	       // 旧的聊天室名称
	string newRoomId = 4;          // 新的聊天室ID
	string newRoomName = 5;	       // 新的聊天室名称
	int32 queueSize = 6;           // 前面排队人数
}

message PCommunity {
	string ownerUuid = 1;          // 超级管理员uuid
	string communityId = 2;        // 社区ID
	string communityName = 3;      // 社区名称
	string communityIcon = 4;      // 社区头像url
    repeated string uuids = 5;     // 普通管理员uuid
}

message PMemberList {
	int32 size = 1;                // 成员数量
	repeated PMember list = 2;     // 成员信息
}

message PMember {
	PUserBase user = 1;			   // 成员信息
	int32 IsFriend = 2;			   // 0表示不是好友，1表示是好友
	int32 IsFollow = 3;			   // 0表示未关注，1表示已关注
	int32 IsManager = 4;	       // 0表示成员，1表示是管理员，2表示是超级管理员
	int32 gameLevel = 5;           // 游戏化等级
}


message PEachMsg {
	string receiverUUID = 1;		
	string alertContent = 2;		
	string info = 3;				
}

message PMoreMsg {
	string title = 1;				// 推送消息的标题。
	string msgid = 2;				// 推送消息的msgid，该字段是阿里悟空中要用，尚未知其含义，先随便填充一个值1000。
	string description = 3;			// 推送消息的描述。
	repeated PEachMsg list = 4;     // 成员信息
}

/*
 *@note 获取用户登录阿里悟空的凭证信息
 *@path /chat/user/token
 *@method GET
 *@cookie token&uuid 登录用户信息
 *@param devType 设备类型（固定为"ios"或"android"）
 *@return 成功返回PWkToken，失败返回PResult
 */

/*
 *@note 创建会话（单聊）
 *@path /chat/conversation/create/single
 *@method GET
 *@cookie token&uuid 登录用户信息（必须）
 *@param friend_uuid 好友uuid（必须）
 *@return 成功返回PConversation，失败返回PResult
 */
 
/*
 *@note 创建会话（群聊）
 *@path /chat/conversation/create/group
 *@method GET
 *@cookie token&uuid 登录用户信息（必须）
 *@param title 群聊名称（非必须）
 *@param icon  群聊头像url（非必须）
 *@param member_uuid 群组成员uuid数组（必须）     格式：member_uuid=1&member_uuid=2&member_uuid=3
 *@return 成功返回PConversation，失败返回PResult
 */
 
/*
 *@note 修改聊天tag（当有好友关系变更时调用此接口，用于标示是否可以聊天）
 *@path /chat/conversation/update/tag
 *@method GET
 *@param uuid 用户uuid（必须）
 *@param friend_uuid 好友uuid（必须）
 *@param tag 聊天tag（0-建立好友关系 1-解除好友关系）
 *@return 返回PResult
 */

/*
 *@note 初始化/更新社区聊天室
 *@path /chat/room/init
 *@method POST
 *@body   PCommunity数据流
 *@return 返回PResult
 */

/*
 *@note 进入社区聊天室
 *@path /chat/room/join
 *@method GET
 *@cookie token&uuid 登录用户信息（必须）
 *@param communityId 社区ID（必须）
 *@param exitRoom    是否退出别的聊天室（1-是，0-否），默认0
 *@param coverqueue  是否放弃别的排队  （1-是，0-否），默认0
 *@return 进入成功返回PConversation，提示用户选择返回PJoinRoom，系统错误返回PResult
 		 *注意：返回PJoinRoom时根据code值做对应处理：
 		  code=1910002表示正在排队
 		  code=1910003表示两个聊天室需要选择一个排队
 		  code=1910004表示两个聊天室需要选择一个进入
 		  code=1910005表示人数已达上限可选择排队
 */
 
/*
 *@note 社区聊天室排队
 *@path /chat/room/queue
 *@method GET
 *@param token&uuid 登录用户信息（必须）
 *@param communityId 社区ID（必须）
 *@return 返回PResult，当errorCode=0时，extraInfo表示排队人数。（此返回结果只标识是否进入排队，不代表已进入聊天室，系统排队成功后将给App用户推送通知消息）
 */
 
/*
 *@note 退出社区聊天室
 *@path /chat/room/exit
 *@method GET
 *@cookie token&uuid 登录用户信息（必须）
 *@param communityId 社区ID（必须）
 *@return 返回PResult，注意：errorcode=1901009表示用户不能退出聊天室
 */ 
 
/*
 *@note 释放聊天室排队成功占位
 *@path /chat/room/release
 *@method GET
 *@param token&uuid 登录用户信息（必须）
 *@param communityId 社区ID（必须）
 *@return 返回PResult
 */ 
 
/*
 *@note 获取聊天室成员信息
 *@path /chat/room/member
 *@method GET
 *@cookie token&uuid 登录用户信息（必须）
 *@param communityId 社区ID（必须）
 *@param startUuid 上一次获取最后成员的uuid，可缺省
 *@param count 每次加载的数据量
 *@return 成功返回PMemberList，失败返回PResult
 */
 
/*
 *@note 获取聊天室排队成员信息
 *@path /chat/room/queueMember
 *@method GET
 *@cookie token&uuid 登录用户信息（必须）
 *@param communityId 社区ID（必须）
 *@param startUuid 上一次获取最后成员的uuid，可缺省
 *@param count 每次加载的数据量
 *@return 成功返回PMemberList，失败返回PResult
 */
 
 /*
 *@note 聊天室管理员踢人
 *@path /chat/room/tiren
 *@method GET
 *@cookie token&uuid 登录用户信息（必须）
 *@param communityId 社区ID（必须）
 *@param memberUuid 被踢出的成员uuid（必须）
 *@return 返回PResult，注意：errorcode=1901010表示用户没有权限
 */
 
  /*
 *@note 聊天室管理员禁言
 *@path /chat/room/prohibit
 *@method GET
 *@cookie token&uuid 登录用户信息（必须）
 *@param communityId 社区ID（必须）
 *@param memberUuid 成员uuid（必须）
 *@type 0表示禁言，1表示取消禁言（必须）
 *@return 返回PResult，注意：errorcode=1901010表示用户没有权限
 *备注：社区被禁言的用户数据会同步到会话的扩展字段extension中，key的格式为"pro_x"，pro_是固定前缀，x是uuid
 */
 
 
 
 
 /*----------------------------------*/
// 通用操作结果返回(通过uuid来获取chatid)
message PChatIdMessage {
	string uuid = 1;	//账户系统中的uuid
	string chatId = 2;	//对应聊天系统中的chatid
}

// 通用操作结果返回(通过uuids来获取chatids)
message PChatIdListMessage {
	repeated PChatIdMessage chatIdMap = 1;
}

/*
 *@note 通过uuid来获取chatid
 *@path /chat/chatid/getUserChatID
 *@method GET
 *@cookie token&uuid 登录用户信息
 *@param uuid  对照表中的uuid
 *@return 返回PChatIdMessage
 */

 /*
 *@note 通过uuids来获取chatids
 *@path /chat/chatid/getUserListChatID
 *@method GET
 *@cookie token&uuid 登录用户信息
 *@param uuids  对照表中要查询的所有uuid串，多个uuid之间用逗号隔开。
 *@return 返回PChatIdListMessage
 */


/*
 *@note 用户发送自定义消息
 *@path /chat/message/sendCustomMsg
 *@method POST
 *@cookie token&uuid 登录用户信息
 *@param uuid  发送消息的用户uuid
 *@param conversationId  会话id
 *@param receivers  指定消息接收的群成员uuid列表,成员之间用逗号(,)隔开。也可以补不填，将默认是会话里全部用户。
 *@param customType  自定义的消息类型，格式为整数。
 *@param customParam  自定义的消息内容，暂时定义为map格式的字符串。多条记录之间用逗号隔开，单条里面用等号来连接。示范为“k1=v2,k2=v2,k3=v3”。
 *@return 返回PResult  成功与否，看errorCode和errorMsg
 */


/*
 *@note 给用户推送消息。"alertContent+info"的内容不能查过230个字节。(备注：由于此接口是GET方式，不招人喜欢。在后续版本中将废弃掉该接口;请用“/chat/push/msg/multi”接口来代替，两者接口完全兼容)
 *@path /chat/push/msg/single
 *@method GET
 *@cookie token&uuid 登录用户信息
 *@param receiverUUID  消息接收者的uuid。
 *@param title  推送消息的标题。
 *@param msgid  推送消息的msgid，该字段是阿里悟空中要用，尚未知其含义，先随便填充一个值1000。
 *@param description  推送消息的描述。
 *@param alertContent  推送消息的的在终端设备中提示的标题。
 *@param info  推送给客户端的字符串
 *@return 返回PResult
 */
 
/*
 *@note 给用户推送消息(群发消息)。"alertContent+info"的内容不能查过230个字节。
 *@path /chat/push/msg/multi
 *@method POST
 *@cookie token&uuid 登录用户信息
 *@param receiverUUIDs  多个接收者的uuid列表，uuid之间用“逗号”隔开。
 *@param title  推送消息的标题。
 *@param msgid  推送消息的msgid，该字段是阿里悟空中要用，尚未知其含义，先随便填充一个值1000。
 *@param description  推送消息的描述。
 *@param alertContent  推送消息的的在终端设备中提示的标题。
 *@param info  推送给客户端的字符串
 *@return 返回PResult
 */

/*
 *@note 给用户推送消息(群发消息)。
 *@path /chat/push/msg/more
 *@method POST
 *@cookie token&uuid 登录用户信息
 *@param body 为PMoreMsg结构
 *@return 返回PResult
 */


/*
 *@note 同步用户信息到悟空（不包含添加用户信息）
 *@path /chat/user/synUserInfo
 *@method GET
 *@cookie token&uuid 登录用户信息
 *@param uuid  用户uuid。
 *@param token  用户token。
 *@return 返回PResult
 */