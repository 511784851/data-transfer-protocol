// Code generated by protoc-gen-go.
// source: result.proto
// DO NOT EDIT!

package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 通用操作结果返回
type PResult struct {
	Type      int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=errorCode" json:"errorCode,omitempty"`
	ErrorMsg  string `protobuf:"bytes,3,opt,name=errorMsg" json:"errorMsg,omitempty"`
	ExtraInfo string `protobuf:"bytes,4,opt,name=extraInfo" json:"extraInfo,omitempty"`
}

func (m *PResult) Reset()                    { *m = PResult{} }
func (m *PResult) String() string            { return proto.CompactTextString(m) }
func (*PResult) ProtoMessage()               {}
func (*PResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

//
// @note 用于反序列化时，第一次的探索，以进一步判断序列化的数据是什么类型
// @type 可能出现的结构类型定义
type PType struct {
	Type int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
}

func (m *PType) Reset()                    { *m = PType{} }
func (m *PType) String() string            { return proto.CompactTextString(m) }
func (*PType) ProtoMessage()               {}
func (*PType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*PResult)(nil), "common.PResult")
	proto.RegisterType((*PType)(nil), "common.PType")
}

var fileDescriptor1 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4a, 0x2d, 0x2e,
	0xcd, 0x29, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0xce, 0xcf, 0xcd, 0xcd, 0xcf,
	0x53, 0x2a, 0xe5, 0x62, 0x0f, 0x08, 0x02, 0x4b, 0x08, 0x09, 0x71, 0xb1, 0x94, 0x54, 0x16, 0xa4,
	0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x81, 0xd9, 0x42, 0x32, 0x5c, 0x9c, 0xa9, 0x45, 0x45,
	0xf9, 0x45, 0xce, 0xf9, 0x29, 0xa9, 0x12, 0x4c, 0x60, 0x09, 0x84, 0x80, 0x90, 0x14, 0x17, 0x07,
	0x98, 0xe3, 0x5b, 0x9c, 0x2e, 0xc1, 0x0c, 0x94, 0xe4, 0x0c, 0x82, 0xf3, 0xc1, 0x3a, 0x2b, 0x4a,
	0x8a, 0x12, 0x3d, 0xf3, 0xd2, 0xf2, 0x25, 0x58, 0xc0, 0x92, 0x08, 0x01, 0x25, 0x69, 0x2e, 0xd6,
	0x80, 0x10, 0x90, 0x05, 0x58, 0x2c, 0x75, 0xd2, 0xe6, 0x92, 0x06, 0xba, 0x4e, 0x2f, 0x3f, 0x27,
	0x35, 0xb1, 0xb8, 0x24, 0xb5, 0x48, 0x2f, 0x29, 0x27, 0x35, 0x37, 0x3f, 0x29, 0x13, 0xe4, 0xf2,
	0xa4, 0xd2, 0x34, 0x27, 0x1e, 0x88, 0x7b, 0x03, 0x40, 0xfe, 0x28, 0x4e, 0x62, 0x03, 0xfb, 0xc7,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x2b, 0xc0, 0x21, 0xdf, 0x00, 0x00, 0x00,
}
