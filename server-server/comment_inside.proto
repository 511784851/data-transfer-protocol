syntax = "proto3";
package bbproto;
import "comment.proto";
import "result.proto";
import "common_inside.proto";

// 加载评论的参数
message PCommentParam {
    string postId    = 1;     //提醒消息的创建者
    string postUuid  = 2;     //提醒消息的创建者
    int32  offset    = 3;     // 分页查询的偏移
    int32  count     = 4;     //分页大小
}

// 加载二级评论的参数
message PCommentCommentParam {
    string cid     = 1;   //一级评论ID
    int32  offset  = 2;   //分页查询的偏移
    int32  count   = 3;   //分页大小
}

// 通过ID查评论的参数
message PQueryByIdsParam {
    string            uuid     = 1;   //查看评论的用户
    repeated  string  ids      = 2;   //评论ID列表
}

/*
 *@note 关闭/开启 某个微博帖子的智能回复功能
 *@path /comment/togglecomment
 *@method POST
 *@param uid 帖子的作者ID
 *@param id 帖子的ID
 *@param action 0表示要关闭，1表示要开启
 *@return PResult，成功关闭或成功开启，errcode等于0
 */

/*
 *@note 屏蔽/解除屏蔽 某个微博帖子的整个评论
 *@path /comment/shieldcommentall
 *@method POST
 *@param uid 帖子的作者ID
 *@param id 帖子的ID
 *@param action 0表示屏蔽，1表示解除屏蔽
 *@return PResult，成功关闭或成功开启，errcode等于0
 */

 /*
 *@note 屏蔽/解除屏蔽 某个微博帖子的某一条评论
 *@path /comment/shieldcommentsingle
 *@method POST
 *@param pid 评论ID
 *@param action 0表示屏蔽，1表示解除屏蔽
 *@return PResult，成功屏蔽或成功解除屏蔽，errcode等于0
 */

 /*
 *@note 获取某条微博回复功能是否开启
 *@path /comment/cancomment
 *@method GET
 *@param from 服务请求来源，如:platform
 *@param uid 帖子的作者ID
 *@param id 帖子的ID
 *@return 成功返回PCommentBool(开启：true, 关闭：false)，失败返回PResult
 */

 /*
 *@note 获取某条微博是否屏蔽全部评论
 *@path /comment/isshieldpostcomment
 *@method GET
 *@param from 服务请求来源，如:platform
 *@param uid 帖子的作者ID
 *@param id 帖子的ID
 *@return 成功返回PCommentBool(屏蔽:true, 未屏蔽:false)，失败返回PResult
 */

 /*
 *@note 获取某条评论是否屏蔽
 *@path /comment/isshieldcomment
 *@method GET
 *@param from 服务请求来源
 *@param id 评论的ID
 *@return 成功返回PCommentBool(屏蔽:true, 未屏蔽:false)，失败返回PResult
 */

 /*
 *@note 任务消息订阅
 *@path /v1/comment/inside/task/msg/subscribe
 *@method POST
 *@param from 调用的服务名
 *@param PSubscribeArray 订阅消息
 *@return 返回PResultt
 */

service IGrpcComment {
     /*
     *@note 批量评论微博
     *@param PClientCommentList 评论的内容列表 
     *@return PInt32Single失败的评论的下标
     */
    rpc GrpcComment(PClientCommentList) returns (PInt32Single);

    /*
     *@note 批量回复微博评论
     *@param PClientCommentList 回复的内容列表 
     *@return PInt32Single失败的评论的下标
     */
    rpc GrpcCommentReply(PClientCommentList) returns (PInt32Single);

    /*
     *@note 批量赞微博评论
     *@param PBetchCommentVote 动作类型,期望赞的评论ID、用户列表
     *@return PEmpty
     */
    rpc GrpcCommentVote(PBetchCommentVote) returns (PEmpty);

    /*
     *@note 批量判断用户是否赞过评论
     *@param PBetchCommentVote 期望判断的评论ID、用户UUID
     *@return PCommentVoteExist
     */
    rpc GrpcCommentVoteExist(PBetchCommentVote) returns (PBetchCommentVoteExist);

    /*
     *@note 查询帖子的评论数
     *@param PStringList 帖子ID列表
     *@return PInt32List
     */
    rpc GrpcGetCommentCnt(PStringList) returns (PInt32List);

    /*
     *@note 查询评论的回复数
     *@param PStringList 帖子ID列表
     *@return PInt32List
     */
    rpc GrpcGetCommentReplyCnt(PStringList) returns (PInt32List);

    /*
     *@note 加载帖子评论
     *@param PCommentParam
     *@return PCommentExtList
     */
    rpc GrpcLoadComment(PCommentParam) returns (PCommentExtList);

     /*
     *@note 加载评论的二级评论
     *@param PCommentCommentParam
     *@return PCommentExtList
     */
    rpc GrpcLoadCommentComment(PCommentCommentParam) returns (PCommentExtList);

    /*
     *@note 通过评论ID获取评论内容
     *@param PQueryByIdsParam
     *@return PCommentExtList
     */
    rpc GrpcGetCommentByIds(PQueryByIdsParam) returns (PCommentExtList);
 }