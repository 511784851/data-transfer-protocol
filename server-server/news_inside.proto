syntax = "proto3";
package bbproto;
import "news.proto";
import "common_inside.proto";
import "result.proto";
option java_package = "com.blemobi.sep.probuf";
option java_outer_classname = "NewsApiProtos";

//帖子状态操作类型
enum EStateOperType {
    OpPass          = 0; //设为审核通过
    OpWaite         = 1; //设为待审核
    OpReject        = 2; //设为审核不通过
    OpLock          = 3; //设为锁定
    OpUnLock        = 4; //设为解锁
    OpShield        = 5; //设为屏蔽
    OpUnShield      = 6; //设为解除屏蔽
}

// A查看B的个人统计信息
message PNewsUserStatistic {
	int32 FollowCount    = 1;   // 关注数
	int32 FansCount      = 2;	// 粉丝数
	int32 BbnewsCount    = 3;	// 动态数
	int32 NewsfeedCount  = 4;	// 资讯数
	int32 FollowShip     = 5;	// 两用户间的关系、0:无关系, 1: B关注了A, 2:A关注了B, 3：相互关注
    int64 FollowTime     = 6;   // A关注B的时间
    int64 PassiveTime    = 7;   // A被B关注的时间
}

// 个人统计信息列表
message PNewsUserStatisticList {
   repeated PNewsUserStatistic list = 1;
}

// 各类帖子数量
message PPostCountStatistic {
    int32 BbNewsCnt     = 1; // 动态帖个数
    int32 NewsFeedCnt   = 2; // 资讯帖个数
    int32 NoticeCnt     = 3; // 公告帖个数
}

// 设置帖子状态
message PSetPostStateParam {
    repeated int64   postIds    = 1; //帖子列表
    EStateOperType   state       = 2; //帖子状态, 0:审核通过; 1:待审核; 2:审核不通过; 3:锁定;4:解锁; 5:屏蔽; 6:解除屏蔽;
}

// 刷timeline参数
message PRefreshTimelineParam {
    string timelineClass  = 1; //timeline类型: bbnews:动态, newsfeed:资讯,all:所有
    int64  offset         = 2; //偏移,为上次返回的最后一个帖子ID
    int64  count          = 3; //查询条数, 默认10
}

// 获取帖子信息参数
message PGetPostsParam {
    repeated int64 postIds   = 1; //帖子ID列表
    string         uuid      = 2; //查看的用户,可选参数. 如果非空, 则填充用户关系信息(已收藏、已点赞等)
    int32          viewType  = 3; //查看类型,  0:用户查看(非正常帖子不显示正文)  1: 监管查看(显示所有状态的所有帖子)
}

// 内部发帖结构
message PInsidePostNew {
    string          uuid = 1;  //作者
    PPostNew        post = 2;  //帖子内容
    int32     createType = 3;  //可选参数. 0:正常创建(原有服务使用); 1:隐式创建(视频服务使用)
}

// 查看用户的发帖历史
message PQueryHitoryParam {
    string  uuid        = 1;  //要查看的用户
    string  communityId = 2;  //可选参数. 空: 用户所有历史; 非空: 用户在指定社区的历史
    string  postClass   = 3;  //可选参数. all: 动态+资讯; bbnews:动态; newsfeed:资讯. 默认: all
    int64   offset      = 4;  //偏移,为上次返回的最后一个帖子ID, 默认:0
    int64   count       = 5;  //查询条数, 默认10
}

// 帖子简要信息
message PPostBrief {
    int64   id          = 1;  //帖子ID
    string  uuid        = 2;  //作者
    string  communityId = 3;  //社区ID
}

// 帖子简要信息
message PPostBriefList {
    repeated PPostBrief List = 1; //信息列表
}

// 删除帖子参数
message PDeletePostsParam {
     string      postId   = 1; //帖子ID
     string      uuid     = 2; //执行删除的用户
}

// 查询用户信息参数
message PNewsQueryUserParam {     
     string           uuid      = 1; //发起查询的用户
     repeated string  targets   = 2; //被查询的用户uuid
}

/**
 *@note 用户批量关注/取消关注
 *@path /v1/news/inside/multi/follow
 *@method GET
 *@param from 发起调用的服务方，必须在consul上注册
 *@param uuid 发起关注的用户id
 *@param oper 为1时表示添加关注，为0时表示取消关注
 *@param targetuuids 被关注的用户id列表，多个用户用,分割
 *@return 成功返回 PBoolList ，失败返回 PResult
 */

/**
 *@note 用户批量判断是否关注关系
 *@path /v1/news/inside/multi/follow/status
 *@method GET
 *@param from 发起调用的服务方，必须在consul上注册
 *@param uuid 发起关注的用户id
 *@param targetuuids 被关注的用户id列表，多个用户用,分割
 *@return 成功返回 PBoolList, true: 关注, false: 未关注。失败返回 PResult
 */

/**
 *@note 两个用户相互/取消关注
 *@path /v1/news/inside/followab
 *@method GET
 *@param from 发起调用的服务方，必须在consul上注册
 *@param uuida 用户a的id
 *@param uuidb 用户b的id
 *@param oper 为1时表示添加关注，为0时表示取消关注
 *@return 返回 PResult
 */

/**
 *@note 获取两个用户关注的状态以及粉丝数
 *@path /v1/news/inside/follow/relation
 *@method GET
 *@param from 发起调用的服务方，必须在consul上注册
 *@param uuida 用户a的id
 *@param uuidb 用户b的id
 *@return 成功返回 PRelation, 失败返回 PResult
 */

/**
 *@note 屏蔽帖子
 *@path /v1/news/inside/post/hide
 *@method GET
 *@param from 发起调用的服务方，必须在consul上注册
 *@param postid 帖子id
 *@param oper 0表示要屏蔽，1表示要解除屏蔽
 *@return 成功返回 PRelation ，失败返回 PResult
 */


/**
 *@note 批量判断某个帖子是否存在
 *@path /v1/news/inside/multi/post/exist
 *@method GET
 *@param from 发起调用的服务方，必须在consul上注册
 *@param postids 帖子id，多个帖子id用,分隔
 *@return 成功返回 PBoolList ，失败返回 PResult
 */

/**
 *@note   获取粉丝列表
 *@path   /v1/news/inside/fans
 *@method GET
 *@param from 发起调用的服务方，必须在consul上注册
 *@param  uuid 被查找的用户uuid
 *@param  count 单次返回的记录条数，默认为20，最大不超过100
 *@param  offset 下次查询的起点，默认为0。
 *@return 成功返回 PStringList ，失败返回 PResult
 */

/**
 *@note 获取用户微博统计数据
 *@path   /v1/news/inside/statistic
 *@method GET
 *@param from 发起调用的服务方，必须在consul上注册
 *@param  uuid 发起查找用户的uuid，如果没有，不用填改字段
 *@param  targetuuid 被查找的用户uuid
 *@return 成功返回 PNewsUserStatistic ，失败返回 PResult
 */

 /*
 *@note 任务消息订阅
 *@path /v1/news/inside/task/msg/subscribe
 *@method POST
 *@param from 发起调用的服务方，必须在consul上注册
 *@param PSubscribeArray 订阅消息
 *@return 返回PResult
 */

/**
*@note   内部获取关注列表
*@path   /v1/news/inside/follow
*@method GET
*@param from 发起调用的服务方，必须在consul上注册
*@param uuida 查找的用户uuid
*@param  uuidb 被查找的用户uuid
*@param  count 单次返回的记录条数，默认为20，最大不超过100。
*@param  offset 下次查询的起点，为上一次结果中的PFollowOrFansList.Index. 默认为0。
*@return 成功返回 PFollowOrFansList ，失败返回 PResult
*/

 /**
 *@note   获取微博帖子作者uuid
 *@path   /v1/news/inside/post/author
 *@method GET
  *@param from 发起调用的服务方，必须在consul上注册
 *@param  postid   微博帖子ID
 *@return 成功返回 PStringSingle ，失败返回 PResult
 */

/**
 *@note   批量获取帖子点赞数
 *@path   /v1/news/inside/multi/post/votecount
 *@method GET
 *@param from 发起调用的服务方，必须在consul上注册
 *@param  postids 帖子ID列表, 多个帖子id用,分隔.最大个数1000
 *@return 返回 PInt32List.失败返回 PResult
 */

service IGrpcNews {
    /*
     *@note 编辑帖子
     *@param PPostNew 编辑后的帖子 
     *@return PEmpty
     */
    rpc GrpcPostEdit(PPostNew) returns (PEmpty);

    /*
     *@note 发布帖子
     *@param PInsidePostNew 发布的帖子
     *@return PEmpty
     */
    rpc GrpcPostPublish(PInsidePostNew) returns (PEmpty);

    /*
     *@note 批量点赞帖子
     *@param PBetchVoteAction 期望点赞的帖子ID、执行动作的用户列表
     *@return PEmpty 
     */
    rpc GrpcPostVote(PBetchVoteAction) returns (PEmpty);

    /*
     *@note 批量判断用户是否点赞过帖子
     *@param PBetchVoteAction 期望判断的帖子ID、用户UUID     
     *@return PNewsVoteExist 
     */
    rpc GrpcPostVoteExist(PBetchVoteAction) returns (PNewsVoteExist);

    /*
     *@note 批量获取帖子点赞数(视频服务)
     *@param PStringList 帖子ID    
     *@return PInt32List 
     */
    rpc GrpcGetPostsVoteCnt(PStringList) returns (PInt32List);

    /*
     *@note 批量关注用户
     *@param PBetchFollowAction 目标uuid，发起关注的uuid列表    
     *@return PEmpty 
     */
    rpc GrpcNewsFollow(PBetchFollowAction) returns (PEmpty);

    /*
     *@note 批量判断是否关注用户
     *@param PBetchFollowAction 目标uuid，待判断的uuid列表    
     *@return PNewsFollowExist 
     */
    rpc GrpcNewsFollowExist(PBetchFollowAction) returns (PNewsFollowExist);

    /*
     *@note 获取社区各类帖子数量
     *@param PInt64Single 社区ID    
     *@return PPostCountStatistic 
     */
    rpc GetCommunityPostCount(PInt64Single) returns (PPostCountStatistic);

    /*
     *@note 获取系统帖子总数   
     *@return 帖子数 
     */
    rpc GetGlobalPostCount(PEmpty) returns (PPostCountStatistic);


    /*
     *@note 通过帖子ID获取帖子详情
     *@param PGetPostsParam 帖子ID列表,访客的用户id
     *@return PPostViewList 
     */
    rpc GetPostInfoByIds(PGetPostsParam) returns (PPostViewList);

     /*
     *@note 设置帖子状态
     *@param PSetPostStateParam 帖子ID列表、状态    
     *@return PEmpty 
     */
    rpc SetPostState(PSetPostStateParam) returns (PEmpty);

    /*
     *@note 查询帖子状态
     *@param PStringList 帖子ID   
     *@return PInt32List 帖子状态
     */
    rpc GetPostState(PStringList) returns (PInt32List);

     /*
     *@note 刷新全局timeline
     *@param PRefreshTimelineParam 参数    
     *@return PPostViewList 
     */
    rpc RefreshGlobalTimeline(PRefreshTimelineParam) returns (PPostViewList);  

    /*
     *@note 查询用户粉丝数(监管)
     *@param PStringList 用户列表   
     *@return PInt32List 用户的粉丝数
     */
    rpc GetUsersFansCount(PStringList) returns (PInt32List); 

    /*
     *@note 查看用户的发帖历史
     *@param PQueryHitoryParam 查询参数   
     *@return PPostViewList
     */
    rpc GrpcGetUserPostHistory(PQueryHitoryParam) returns (PPostViewList);

    /*
     *@note  查询帖子简要信息(大数据)
     *@param    PStringList 帖子ID列表
     *@return   PPostBriefList
     */
    rpc GrpcGetPostBrief(PStringList) returns (PPostBriefList);

    /*
     *@note  查询帖子状态和统计(网盘服务使用、大数据)
     *@param    PGetPostsParam 帖子ID列表, viewType字段忽略
     *@return   PPostViewList 只填充状态信息和统计信息 
     */
    rpc GrpcGetPostExtraInfo(PGetPostsParam) returns (PPostViewList);

    /*
     *@note    删除帖子(网盘服务使用删除原创录播帖)
     *@param    PDeletePostsParam 帖子ID
     *@return   PEmpty
     */
    rpc GrpcDeletePost(PDeletePostsParam) returns (PEmpty);

    /*
     *@note    查询用户的统计信息(粉丝数、关注数、帖子数)
     *@param    PNewsQueryUserParam 帖子ID
     *@return   PNewsUserStatisticList
     */
    rpc GrpcGetUserStatistic(PNewsQueryUserParam) returns (PNewsUserStatisticList);
 }