/*
 *@note 获取消息推送的服务需要实现的接口，如edge需要实现  /v1/edge/inside/msgpush/consumer
 *@URL /v1/%s(这里填具体的服务名)/inside/msgpush/consumer
 *@method POST
 *@url param from 发起调用的服务名
 *@body PBinaryMsgList 序列化的二进制数据；具体PBinaryMsg存储的数据，要根据实际的MsgType以及from字段来解析
 *@return 返回 PResult;
 */

// login 推送的消息有
/*
1. 同步token的消息,login将会在用户登录，登出的时候，通知edge服务某个uuid用户的token发生更改了
    PBinaryMsg.MsgType = 0
    PBinaryMsg.MsgData = proto.Marshal(&PStringList{List: []string{uuid, token}})
*/

// account 推送消息有
/*
1. 同步用户等级更改消息，account将会在用户等级更改时，通知news、achievement服务
    PBinaryMsg.MsgType = 0
    PBinaryMsg.MsgData = proto.Marshal(&PStringList{List: []string{uuid1, uuid2}})

2. 同步用户PUserBase更改消息，account将会在用户PUserBase更改时，通知news、achievement服务
    PBinaryMsg.MsgType = 1
    PBinaryMsg.MsgData = proto.Marshal(&PStringList{List: []string{uuid1, uuid2}})

3. 同步用户PUserBase的消息，account将会在用户PUserBase更改时，推送PUserBase给task,chat服务
    PBinaryMsg.MsgType = 2
    PBinaryMsg.MsgData = proto.Marshal(&PUserBaseList{})

4. 同步VO成员ID的消息，account将会在VO成员增加或删除时，推送uuid给Community服务
   格式[]string{uuid, action}
   action: 0: 删除, 1: 增加

    PBinaryMsg.MsgType = 3
    PBinaryMsg.MsgData = proto.Marshal(&PStringList{[]string{uuid, action}})
*/

syntax = "proto3";

package bbproto;
import "result.proto";

message PEmpty {}

service Common {
 /*
 *@note 获取服务健康信息
 */
  rpc HealthCheck(PEmpty) returns (PServiceHealth) {}
}
