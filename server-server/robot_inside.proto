syntax = "proto3";
package bbproto;
import "robot.proto";
import "result.proto";
import "common_inside.proto";
import "streaming.proto";
import "account.proto";
option java_package = "com.blemobi.sep.probuf";
option java_outer_classname = "RobotApiProtos";


// 红包服务通知机器人的消息
message PBRedPacketNotifyMsg {
    string  ordNo      = 1;    //订单号,也是参与者的ots存储key
    string  text       = 2;    //红包留言
}

// 抽奖服务通知机器人的消息
message PBLotteryNotifyMsg {
    string  ordNo      = 1;  //订单号,也是参与者的ots存储key
    string  text       = 2;  //抽奖活动标题
}

// 其他服务通知机器人的消息
message PRobotRawNotifyMsg  {
    PStreamingLive         streaming  = 1; //直播
    PBLotteryNotifyMsg     lottery    = 2; //抽奖
    PBRedPacketNotifyMsg   redpacket  = 3; //红包
}

// 其他服务通知机器人推送的消息
message PRobotNotifyMsg {
    repeated string     to         = 1; //推送目标
    string              from       = 2; //网红用户信息
    ERobotPushType      msgType    = 3; //消息类型
    PRobotRawNotifyMsg  content    = 4; //各类型消息
}

// 其他服务通知机器人推送的消息
message PRobotNotifyMsgList {
    repeated PRobotNotifyMsg  list    = 1;
}

// 生成支付订单的参数
message PPayOrderParma {
    int32 serviceNo    = 1;  //业务编号[0, 99]
    int32 amount       = 2;  //金额[1,52428800], 分
}

// 消息数配置
message PMsgNumLimitParma {
    int32 num           = 1;  //每天消息数
    string celebrity    = 2;  //网红以后id
}

 service IGrpcRobot {
    /*
    *@note 设置B端每天(0-24时)推送消息数
    *@param PInt32Single 每天最大推送消息数
    *@return PEmpty
    */
    rpc GrpcSetMsgNumPerDay(PMsgNumLimitParma) returns (PEmpty);

    /*
    *@note 获取B端每天(0-24时)推送消息数
    *@param PStringSingle 网红UUID
    *@return PInt32Single
    */
    rpc GrpcGetMsgNumPerDay(PStringSingle) returns (PInt32Single);

    /*
    *@note 监管:设置生日祝福的CEO信息
    *@param   PStringSingle 头像图片的objectkey
    *@return PEmpty
    */
    rpc GrpcSetCeoInfo(PStringSingle) returns (PEmpty);

    /*
    *@note 监管:查询已设置生日祝福的CEO信息
    *@return PUserBase
    */
    rpc GrpcGetCeoInfo(PEmpty) returns (PUserBase);

    /*
    *@note 监管:设置生日提醒模板(CEO祝福)
    *@param   PBRemind 消息数据
    *@return PEmpty
    */
    rpc GrpcSetRemindTpl(PBRemind) returns (PEmpty);

    /*
    *@note 监管:查询已设置的生日提醒模板(CEO)
    *@return PBRemind
    */
    rpc GrpcGetRemindTpl(PEmpty) returns (PBRemind);

    /*
    *@note 监管:开启、关闭生日提醒(CEO)
    *@param   PBoolSingle  true:打开, false:关闭  
    *@return PEmpty
    */
    rpc GrpcSetRemindSwitch(PBoolSingle) returns (PEmpty);

    /*
    *@note 监管:查询生日提醒(CEO)开关
    *@return PBoolSingle  true:打开, false:关闭 
    */
    rpc GrpcGetRemindSwitch(PEmpty) returns (PBoolSingle);

    /*
    *@note   推送消息
    *@param  PRobotNotifyMsgList   消息
    *@return PEmpty
    */
    rpc GrpcPush(PRobotNotifyMsgList) returns (PEmpty);

    /*
    *@note   生成支付订单号
    *@param  PPayOrderParma   订单参数
    *@return PStringSingle
    */
    rpc GrpcGenerateOrder(PPayOrderParma) returns (PStringSingle);

 }