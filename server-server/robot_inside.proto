syntax = "proto3";
package bbproto;
import "robot.proto";
import "result.proto";
import "common_inside.proto";
import "notification.proto";
option java_package = "com.blemobi.sep.probuf";
option java_outer_classname = "RobotApiProtos";

// 提醒消息的查询条件
message PRemindQuery {
	string uuid = 1;     //提醒消息的创建者
	string type = 2;     // future, history
	int64  offset = 3;   //分页查询的偏移,为上一页最后一个提醒消息的ID.默认0.
	int64  count = 4;    //分页大小.默认20, 最大100
}

// 提醒消息的删除条件
message PRemindDeleteParam {
    string  uuid  = 1;     //提醒消息的创建者
    string  msgId = 2;    //消息ID
}

// 是否有未读消息查询条件
message PMsgStateQuery {
	string        uuid          = 1; //用户id
	repeated string celebritys  = 2; //网红uuid
}

// 红包服务通知机器人的消息
message PBRedPacketNotifyMsg {
    string  targetKey   = 1;    //红包参与者的存储位置
    int64   redpacketId  =2;    //红包ID
}

// 抽奖服务通知机器人的消息
message PBLotteryNotifyMsg {
    string  targetKey   = 1;  //抽奖参与者的存储位置
    int64   lotteryId    =2;  //抽奖ID
}

// 其他服务通知机器人的消息
message PRobotRawNotifyMsg  {
    PNotifyStreaming       streaming  = 1; //直播
    PBLotteryNotifyMsg     lottery    = 2; //抽奖
    PBRedPacketNotifyMsg   redpacket  = 3; //红包
}

// 其他服务通知机器人推送的消息
message PRobotNotifyMsg {
    repeated string     to         = 1; //推送目标
    string              from       = 2; //网红用户信息
    ERobotPushType      msgType    = 3; //消息类型
    PRobotRawNotifyMsg  content    = 4; //各类型消息
}

// 其他服务通知机器人推送的消息
message PRobotNotifyMsgList {
    repeated PRobotNotifyMsg  list    = 1;
}

// 生成支付订单的参数
message PPayOrderParma {
    int32 serviceNo    = 1;  //业务编号[0, 99]
    int32 amount       = 2;  //金额[1,524288]
    int32 machineNo    = 3;  //机器码[0,31]
}

// 消息数配置
message PMsgNumLimitParma {
    int32 num           = 1;  //每天消息数
    string celebrity    = 2;  //网红以后id
}

 service IGrpcRobot {
    /*
    *@note 设置B端每天(0-24时)推送消息数
    *@param PInt32Single 每天最大推送消息数
    *@return PEmpty
    */
    rpc GrpcSetMsgNumPerDay(PMsgNumLimitParma) returns (PEmpty);

    /*
    *@note 监管:设置生日提醒(CEO祝福)
    *@param   PBRemind 消息数据
    *@return PEmpty
    */
    rpc GrpcCreateRemind(PBRemind) returns (PEmpty);

    /*
    *@note 监管:查询未来7天(或历史)的CEO提醒列表
    *@param  PRemindQuery
    *@return PRemindList
    */
    rpc GrpcGetRemind(PRemindQuery) returns (PBRemindList);

    /*
    *@note 监管:删除提醒消息
    *@param  PRemindDeleteParam      提醒消息创建者和id
    *@return PEmpty
    */
    rpc GrpcDeleteRemind(PRemindDeleteParam) returns (PEmpty);

    /*
    *@note   推送消息
    *@param  PRobotNotifyMsgList   消息
    *@return PEmpty
    */
    rpc GrpcPush(PRobotNotifyMsgList) returns (PEmpty);

    /*
    *@note   生成支付订单号
    *@param  PPayOrderParma   订单参数
    *@return PStringSingle
    */
    rpc GrpcGenerateOrder(PPayOrderParma) returns (PStringSingle);

 }