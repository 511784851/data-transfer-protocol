syntax = "proto3";
package bbproto;
import "robot.proto";

// 提醒消息的查询条件
message PRemindQuery {
	string uuid = 1;     //提醒消息的创建者
	string type = 2;     // future, history
	int32  offset = 3;   //分页查询的偏移,为上一页最后一个提醒消息的ID.默认0.
	int32  count = 4;    //分页大小.默认20, 最大100
}

// 是否有未读消息查询条件
message PMsgStateQuery {
	string        uuid        = 1; //用户id
	repeat string celebritys  = 2; //网红uuid
}

// 其他服务通知机器人推送的消息
message PRobotNotifyMsg {
    repeated string  to    = 1; //推送目标
	PRobotPushMsg message  = 2; //消息内容
}

// 其他服务通知机器人推送的消息
message PRobotNotifyMsgList {
    repeated PRobotNotifyMsg  list    = 1;
}

 service IGrpcRobot {
    /*
    *@note 设置B端每天(0-24时)推送消息数
    *@param PInt32Single 每天最大推送消息数
    *@return PEmpty
    */
    rpc GrpcSetMsgNumPerDay(PInt32Single) returns (PEmpty);

    /*
    *@note 监管:设置生日提醒(CEO祝福)
    *@param   PRemind 消息数据
    *@return PEmpty
    */
    rpc GrpCreateRemind(PRemind) returns (PEmpty);

    /*
    *@note 监管:查询未来7天(或历史)的CEO提醒列表
    *@param  PRemindQuery
    *@return PRemindList
    */
    rpc GrpcGetRemind(PRemindQuery) returns (PRemindList);

    /*
    *@note 监管:删除提醒消息
    *@param  PStringList      提醒消息id
    *@return PEmpty
    */
    rpc GrpcDeleteRemind(PStringList) returns (PEmpty);

    /*
    *@note   推送消息
    *@param  PRobotNotifyMsgList   消息
    *@return PEmpty
    */
    rpc GrpcPush(PRobotNotifyMsgList) returns (PEmpty);

    /*
    *@note   用户查询是否有来自某网红的未读消息
    *@param  PMsgStateQuery   消息
    *@return PInt32List 状态列表. 0:全部已读; 1:存在未读
    */
    rpc GrpcGetMsgState(PMsgStateQuery) returns (PInt32List);
 }