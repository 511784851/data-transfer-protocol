syntax = "proto3";
package service;

// 服务之间推送消息定义
message PPushMsg {
	bytes data = 2;				// 不同服务需要存储的推送内容
	string fromUuid = 3;			// 推送消息发起者
	repeated string toUuids = 4;	// 推送消息接受者
	string type = 5;				// 推送消息类型，见 notification.proto
	int64 time = 6;				// 推送消息产生时间
	string content = 7; 			// 客户端推送显示的内容
}


// 关注通知元消息
message NotifyFollowMeta {
  string uuidA = 1; 			//被关注者id
  string uuidB = 2; 			//关注者id
}

// 点赞通知元信息
message NotifyNewsVoteMeta {
  int32  postId = 1; 			//被点赞帖子id
  string uuidA  = 2; 			//被点赞用户id
  string uuidB  = 3; 			//点赞用户id
}

//帖子@用户通知元信息
message NotifyNewsAtMeta {
	int32 postId 			= 1; //帖子id
	repeated string uuidAs	= 2; //被@的用户id列表
	string uuidB 			= 3; //发帖用户id
}

// 社区邀请通知元消息
message PNotifyCommunityInviteMeta {
	int64 communityId = 1; 	// 邀请加入的社区的id
	string uuid = 2;			// 发起邀请用户的请求
}

// 所有推送消息的基础信息
message PNotifyBaseMsg {
	int64 msgID = 1;// 推送消息的id，全局唯一
	int64 time = 2;// 推送消息的时间，
	int32 status = 3;// 推送消息状态，0为未读，1为已读
	bytes data = 4;// 各个模块存储在数据库的原始数据，PPushMsg.Data
}

// 推送消息列表
message PNotifyBaseMsgList {
	repeated PNotifyBaseMsg list = 1;
}

/*
 *@note 添加推送消息
 *@path /v1/notification/inside/msg
 *@method POST
 *@param from 服务调用者
 *@POST数据为 PPushMsg
 *@return 返回int32错误码
 */

/*
 *@note 删除申请好友推送消息
 *@path /v1/notification/inside/del/uuidab
 *@method GET
 *@param uuida 用户ID A
 *@param uuidb 用户ID B
 *@return PResult
 */