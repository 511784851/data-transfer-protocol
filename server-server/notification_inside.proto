syntax = "proto3";
package bbproto;
option java_package = "com.blemobi.sep.probuf";
option java_outer_classname = "NotificationApiProtos";

import "common_inside.proto"; // common_inside.proto
import "notification.proto";  // server-client/notification.proto

// 服务之间推送消息定义
message PPushMsg {
	bytes data = 2;				  // 不同服务需要存储的推送内容
	string fromUuid = 3;		  // 推送消息发起者
	repeated string toUuids = 4;  // 推送消息接受者
	string type = 5;			  // 推送消息类型，见 notification.proto
	int64 time = 6;				  // 推送消息产生时间
	string content = 7; 		  // 客户端推送显示的内容
	repeated string contentArgs = 8;// content中的参数数据
}

// 批量推送消息列表
message PPushMsgList {
	repeated PPushMsg list = 1;  //消息列表
}

// 关注通知元消息
message NotifyFollowMeta {
  string uuidA = 1; 			//被关注者id
  string uuidB = 2; 			//关注者id
}

// 点赞通知元信息
message NotifyNewsVoteMeta {
  int32  postId = 1; 			//被点赞帖子id
  string uuidA  = 2; 			//被点赞用户id
  string uuidB  = 3; 			//点赞用户id
}

//帖子@用户通知元信息
message NotifyNewsAtMeta {
	int64 postId 			= 1; //帖子id
	repeated string uuidAs	= 2; //被@的用户id列表
	string uuidB 			= 3; //发帖用户id
}

// 社区邀请通知元消息
message PNotifyCommunityInviteMeta {
	int64 communityId = 1; 	// 邀请加入的社区的id
	string uuid = 2;		// 发起邀请用户的请求
}

// 所有推送消息的基础信息
message PNotifyBaseMsg {
	int64 msgID = 1;// 推送消息的id，全局唯一
	int64 time = 2;// 推送消息的时间，
	int32 status = 3;// 推送消息状态，0为未读，1为已读
	bytes data = 4;// 各个模块存储在数据库的原始数据，PPushMsg.Data
}

// 推送消息列表
message PNotifyBaseMsgList {
	repeated PNotifyBaseMsg list = 1;
}

//直播消息元信息
message PStreamingMsgMeta {
	string msgId = 1;//本消息id
}

//任务和成就消息元信息
message PGameMsgMeta {
	//0表示成就信息  1表示任务信息
	int32 tp = 1;
	
	string uuid = 2;

	//成就部分的信息
	//成就ID
	int32 aid = 3;
	
	//任务部分的字段从6开始编码
	//...
	
	//等级ID
	int32 level = 6; // 等级
}

//通知语言变量列表
message PNotifyLangVars {
	repeated string list = 1;
}

/*
 *@note 添加推送消息
 *@path /v1/notification/inside/msg
 *@method POST
 *@param from 服务调用者
 *@body PPushMsg
 *@return PResult
 */

/*
 *@note 删除申请好友推送消息
 *@path /v1/notification/inside/del/uuidab
 *@method GET
 *@param uuida 用户ID A
 *@param uuidb 用户ID B
 *@return PResult
 */

// *********** v2 ************

// 发送到通知系统的消息
message PNotifyInternalMessage {
    bool            stateless = 1; // 是否无状态消息，即不需要进行服务回调
    string          service   = 2; // 请求服务名称
    PNotifyMessage  message   = 3; // 具体消息
    repeated string recipient = 4; // 消息接收的对象的UUID列表
}

// 发送到通知系统的消息列表
message PNotifyInternalMessageList {
    repeated PNotifyInternalMessage list = 1; // 列表
}

message PNotifyFillMessage {
    string                  to       = 1; // 消息接收人
    repeated PNotifyMessage messages = 2; // 通知消息
}

// 通知系统RPC服务
service Notify {
    // 发送单个通知消息，单个通知消息可能有多个接收者
    rpc Send(PNotifyInternalMessageList) returns (PEmpty);
}

// 通知消息填充的RPC回调服务
service NotifyCallback {
    // 填充回调
    // 实现填充回调的服务填充响应自定义消息结构，保持原来的数据不变返回到通知系统
    // 如果需要删除通知消息，只需要把响应消息的ID设置为空即可
    rpc Fill(PNotifyFillMessage) returns (PNotifyFillMessage);
}

/*
 *@note 非Go服务发送系统通知消息
 *@note 自定义国际化参数通过URL QueryString传递
 *@example 如自定义参数task：POST /v2/notification/inside/messages?task=task1&type=103&from=service）
 *@path /v2/notification/inside/system
 *@method POST
 *@param from 服务调用者
 *@param uuid 消息发送者，如果时发送给自己的通知（to==uuid），那么uuid不用传
 *@param type 消息类型
 *@body PStringList 通知消息接收者ID列表
 *@return PResult
 */
