syntax = "proto3";
package bbproto; 
option java_package = "com.blemobi.sep.probuf";
option java_outer_classname = "CommunityApiProtos";


import "result.proto";
import "common_inside.proto";
import "community.proto";

/*
 *@note 通过社区id获取社区基础信息列表
 *@URL /v1/community/inside/communitybaseinfo
 *@method GET
 *@url param from 发起调用的服务名
 *@url param id 社区id，多个社区id以,分割
 *@return 成功返回 PCommunityBaseList ，失败返回 PResult; 
 */

/*
 *@note 获取用户创建/管理的社区id
 *@URL /v1/community/inside/communityid
 *@method GET
 *@url param from 发起调用的服务名
 *@url param uuid 用户id
 *@return 成功返回 PInt64List ，失败返回 PResult; 
 */

/*
 *@note 获取用户创建/管理的社区id
 *@URL /v1/community/inside/communityid_ex
 *@method GET
 *@url param from 发起调用的服务名
 *@url param uuid 用户id
 *@return 成功返回 PInt64List ，失败返回 PResult; list[0] 为社区id，list[1] 为是否创建者（1是创建者）
 */

/*
 *@note 通过社区id获取社区信息
 *@URL /v1/community/inside/communityinfo
 *@method GET
 *@url param from 发起调用的服务名
 *@url param id 社区id
 *@return 成功返回 PCommunityInfo ，失败返回 PResult; 
 */

/*
 *@note 通过社区id获取社区开启状态信息
 *@URL /v1/community/inside/community/status
 *@method GET
 *@url param from 发起调用的服务名
 *@url param ids 社区id列表，多个社区id以,分割
 *@return 成功返回 PInt32List（0为开启，1为关闭） ，失败返回 PResult; 
 */

/*
 *@note 获取用户创建/管理的社区基础信息
 *@URL /v1/community/inside/user/community_base
 *@method GET
 *@url param from 发起调用的服务名
 *@url param uuid 用户id
 *@return 成功返回 PCommunityBaseList ，失败返回 PResult; 
 */

/*
 *@note 获取用户关注的社区id列表
 *@URL /v1/community/inside/user/follow_communityid
 *@method GET
 *@url param from 发起调用的服务名
 *@url param uuid 用户id
 *@return 成功返回 PStringList ，失败返回 PResult;
 */

/*
 *@note 获取用户是否为社区成员
 *@URL /v1/community/inside/user/member_status
 *@method GET
 *@url param from 发起调用的服务名
 *@url param id 社区id
 *@url param uuid 用户id
 *@return 成功返回 PBoolSingle（true为是，false为不是） ，失败返回 PResult;
 */

/*
 *@note 获取用户在指定社区的禁用状态
 *@URL /v1/community/inside/user/forbid_status
 *@method GET
 *@url param from 发起调用的服务名
 *@url param id 社区id
 *@url param uuid 用户id
 *@return 成功返回 PBoolSingle（true为禁用，false为未禁用） ，失败返回 PResult;
 */

/*
 *@note 获取用户在指定社区的黑名单状态
 *@URL /v1/community/inside/user/blacklist_status
 *@method GET
 *@url param from 发起调用的服务名
 *@url param id 社区id
 *@url param uuid 用户id
 *@return 成功返回 PBoolSingle（true为黑名单，false为黑名单） ，失败返回 PResult;
 */

/*
 *@note 获取指定社区的关注用户列表，可按照用户等级筛选
 *@URL /v1/community/inside/userlist/follow
 *@method GET
 *@url param from 发起调用的服务名
 *@url param id 社区id
 *@url param level 用户等级；"reg"(普通用户), "vip"(vip用户), "vipp"(vip+用户), "vo"(官方授权用户); 否则不按照等级筛选，返回所有社区成员
 *@url param offset 一开始以0开始，之后 offset = offset+ count 值偏移
 *@url param count 获取成员个数
 *@return 成功返回 PInsideCommunityUserList ，失败返回 PResult;
 */
 
 // 1.2.x 社区新功能
/*=====================================*/
// 结构定义


/*=====================================*/
// API定义

/*
 *@note 获取社区当前设置的广告信息
 *@URL /v1.2/community/inside/ad
 *@method GET
 *@url param from 发起调用的服务名;只限粉丝管理系统调用
 *@url param id 社区id
 *@return 成功返回 PCommunityBannerInfo ，失败返回 PResult;
 */
 
/*
 *@note 设置社区当前设置的广告信息
 *@URL /v1.2/community/inside/ad
 *@method PUT
 *@form param from 发起调用的服务名;只限粉丝管理系统调用
 *@form param id 社区id
 *@body PCommunityBannerInfo
 *@return 返回 PResult;
 */

service IGrpcCommunity {
    /*
     *@note 获取PCommunityBaseList,不填充IsMember字段
     *@param 社区id的列表 
     *@return 成功返回 PCommunityBaseList ，失败返回 PResult
     */
    rpc GetCommunityBaseList(PStringList) returns (PCommunityBaseList);

    /*
     *@note 获取PCommunityBaseList,并且判断用户是否已加入该社区，填充IsMember字段
     *@param 参数数组 [0]用户UUID [1]社区id的列表 
     *@return 成功返回 PCommunityBaseList ，失败返回 PResult
     */
    rpc GetCommunityBaseListWithUuid(PStringList) returns (PCommunityBaseList);

    /*
     *@note 添加社区分类
     *@param PCommunitySort，其中ID可以不填，Name必填
     *@return 成功返回 PEmpty，失败返回 PResult
     */
    rpc AddCommunitySort(PCommunitySort) returns (PEmpty);

    /*
     *@note 删除社区分类
     *@param PCommunitySort，其中Name可以不填，ID必填
     *@return 成功返回 PEmpty，失败返回 PResult
     */
    rpc DelCommunitySort(PCommunitySort) returns (PEmpty);

    /*
     *@note 修改社区分类的名称
     *@param PCommunitySort，其中ID，Name必填
     *@return 成功返回 PEmpty，失败返回 PResult
     */
    rpc SetCommunitySort(PCommunitySort) returns (PEmpty); 

    /*
     *@note 获取所有社区分类的列表
     *@return 成功返回 PCommunitySortList ，失败返回 PResult
     */
    rpc GetCommunitySort(PEmpty) returns (PCommunitySortList);

    /*
     *@note 获取推荐社区分类列表
     *@return 成功返回 PCommunitySortList ，失败返回 PResult
     */
    rpc GetRecommendCommunitySort(PEmpty) returns (PCommunitySortList);

    /*
     *@note 设置推荐社区分类列表
     *@return 成功返回 PCommunitySortList ，失败返回 PResult
     */
    rpc SetRecommendCommunitySort(PCommunitySortList) returns (PEmpty);

    /*
     *@note 获取某个社区的分类
     *@param 社区ID
     *@return 成功返回 PCommunitySortList，失败返回 PResult
     */
    rpc GetUserCommunitySort(PStringSingle) returns (PCommunitySortList);

    /*
     *@note 设置某个社区的分类
     *@param PCommunitySortList，其中社区ID、分类ID必填；UUID、Name 可以不填
     *@return 成功返回 PEmpty，失败返回 PResult
     */
    rpc SetUserCommunitySort(PCommunitySortList) returns (PEmpty);
 }


