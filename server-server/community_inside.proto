syntax = "proto3";
package bbproto; 
option java_package = "com.blemobi.sep.probuf";
option java_outer_classname = "CommunityApiProtos";

import "result.proto";
import "account.proto";
import "news_inside.proto";
import "common_inside.proto";
import "community.proto";

message PCommunityBaseEx {
    int32 MemberCount = 1;              // 社区成员数量
    PUserBase Owner = 2;                // 社区创建者信息
    PCommunityBase Base = 3;            // 社区基础信息
    PPostCountStatistic PostCount = 4;  // 社区帖子信息
}

message PCommunityBaseExList {
    repeated PCommunityBaseEx list = 1;
}

/*
 *@note 获取指定社区的关注用户列表，可按照用户等级筛选
 *@URL /v1/community/inside/userlist/follow
 *@method GET
 *@url param from 发起调用的服务名
 *@url param id 社区id
 *@url param level 用户等级；"reg"(普通用户), "vip"(vip用户), "vipp"(vip+用户), "vo"(官方授权用户); 否则不按照等级筛选，返回所有社区成员
 *@url param offset 一开始以0开始，之后 offset = offset+ count 值偏移
 *@url param count 获取成员个数
 *@return 成功返回 PInsideCommunityUserList ，失败返回 PResult;
 */
 
service IGrpcCommunity {
    /*
     *@note 获取用户在社区的禁用状态，true为禁用，
     *@param 参数数组 [0]用户UUID [1]社区id 
     *@return 成功返回 PBoolSingle ，失败返回 PResult
     */
    rpc GetForbidFlag(PStringList) returns (PBoolSingle);

    /*
     *@note 获取用户在社区的黑名单状态，true为黑名单
     *@param 参数数组 [0]用户UUID [1]社区id 
     *@return 成功返回 PBoolSingle ，失败返回 PResult
     */
    rpc GetBlacklistFlag(PStringList) returns (PBoolSingle);

    /*
     *@note 获取社区成员列表
     *@param 社区id的列表 
     *@return 成功返回 PStringList ，失败返回 PResult
     */
    rpc GetCommunityMemberList(PStringSingle) returns (PStringList);

    /*
     *@note 获取PCommunityBaseList,不填充Membership字段
     *@param 社区id的列表 
     *@return 成功返回 PCommunityBaseList ，失败返回 PResult
     */
    rpc GetCommunityBaseList(PStringList) returns (PCommunityBaseList);

    /*
     *@note 获取PCommunityBaseList,并且判断用户与社区的关系，填充Membership字段
     *@param 参数数组 [0]用户UUID [1]社区id的列表 
     *@return 成功返回 PCommunityBaseList ，失败返回 PResult
     */
    rpc GetCommunityBaseListWithUuid(PStringList) returns (PCommunityBaseList);
    
    /*
     *@note 获取用户创建/管理的社区信息,如果用户没有创建社区，则PCommunityBase内社区ID为0
     *@param 参数数组 [0]用户UUID
     *@return 成功返回 PCommunityBase ，失败返回 PResult
     */
    rpc GetUserCommunityBase(PStringSingle) returns (PCommunityBase);
    
    /*
     *@note 获取用户关注的社区ID列表
     *@param 用户UUID
     *@return 成功返回 PStringList ，失败返回 PResult
     */
    rpc GetFollowCommunityID(PStringSingle) returns (PStringList);
    
    /*
     *@note 获取用户关注的社区信息列表
     *@param 用户UUID
     *@return 成功返回 PCommunityBaseList ，失败返回 PResult
     */
    rpc GetFollowCommunityBaseList(PStringSingle) returns (PCommunityBaseList);
   
    /*
     *@note 添加社区分类
     *@param PCommunitySort，其中ID可以不填，Name必填
     *@return 成功返回 PCommunitySort PResult
     */
    rpc AddCommunitySort(PCommunitySort) returns (PCommunitySort);

    /*
     *@note 删除社区分类
     *@param PCommunitySort，其中Name可以不填，ID必填
     *@return 成功返回 PEmpty，失败返回 PResult
     */
    rpc DelCommunitySort(PCommunitySort) returns (PEmpty);

    /*
     *@note 修改社区分类的名称
     *@param PCommunitySort，其中ID，Name必填
     *@return 成功返回 PEmpty，失败返回 PResult
     */
    rpc SetCommunitySort(PCommunitySort) returns (PEmpty); 

    /*
     *@note 获取所有社区分类的列表
     *@return 成功返回 PCommunitySortList ，失败返回 PResult
     */
    rpc GetCommunitySort(PEmpty) returns (PCommunitySortList);

    /*
     *@note 获取推荐社区分类列表
     *@return 成功返回 PCommunitySortList ，失败返回 PResult
     */
    rpc GetRecommendCommunitySort(PEmpty) returns (PCommunitySortList);

    /*
     *@note 添加推荐社区分类列表
     *@return 成功返回 PEmpty ，失败返回 PResult
     */
    rpc AddRecommendCommunitySort(PCommunitySort) returns (PEmpty);

    /*
     *@note 设置推荐社区分类列表,覆盖修改，用于排序
     *@return 成功返回 PEmpty ，失败返回 PResult
     */
    rpc SetRecommendCommunitySort(PCommunitySortList) returns (PEmpty);

    /*
     *@note 移除推荐社区分类
     *@param PCommunitySort，其中Name可以不填，ID必填
     *@return 成功返回 PEmpty，失败返回 PResult
     */
    rpc DelRecommendCommunitySort(PCommunitySort) returns (PEmpty);

    /*
     *@note 获取某个社区的分类
     *@param 社区ID
     *@return 成功返回 PCommunitySortList，失败返回 PResult
     */
    rpc GetUserCommunitySort(PStringSingle) returns (PCommunitySortList);

    /*
     *@note 设置某个社区的分类,全覆盖
     *@param PCommunitySortList，其中社区ID、分类ID必填；UUID、Name 可以不填
     *@return 成功返回 PEmpty，失败返回 PResult
     */
    rpc SetUserCommunitySort(PCommunitySortList) returns (PEmpty);

    /*
     *@note 获取社区的top userlist
     *@return 成功返回 PStringList top user的uuid ，失败返回 PResult
     */
    rpc GetTopUserList(PStringSingle) returns (PStringList);

    /*
     *@note 设置社区的top userlist
     *@param 参数数组 [0]社区id [1]uuid列表...
     *@return 成功返回 PEmpty ，失败返回 PResult
     */
    rpc SetTopUserList(PStringList) returns (PEmpty);

    /*
     *@note 分页获取社区的 PCommunityBaseExList
     *@param 参数数组 [0]分页偏移值 [1]分页大小
     *@return 成功返回 PCommunityBaseExList ，失败返回 PResult
     */
    rpc GetCommunityBaseExList(PInt32List) returns (PCommunityBaseExList);
 }