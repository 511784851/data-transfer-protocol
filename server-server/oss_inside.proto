syntax = "proto3";
package bbproto;

import "result.proto";
import "common_inside.proto";
import "oss.proto";

/*
 *@note 内网访问获取带签名的文件上传URL
 *@path /oss/uploadurl
 *@method GET
 *@param from 调用的服务名称
 *@param bucket 文件要存放的oss桶， 0 不持久桶，文件会过期，1持久桶，3静态文件桶
 *@digest 要上传的文件的md5 hexstring
 *@length 文件大小，字节
 *@extension 扩展名 如jpg,png,gif,bmp,mp3,apk等
 *@return 成功返回PUpload，失败返回PResult
 */

/*
 *@note 内网访问批量获取带签名的文件上传URL
 *@path /oss/uploadurls
 *@method POST
 *@param from 调用的服务名称
 *@param bucket 文件要存放的oss桶， 0 不持久桶，文件会过期，1持久桶，3静态文件桶
 *@body   PFileInfoArray
 *@return 成功返回PUploadArray，失败返回PResult
 */

/*
 *@note 内网获取下载文件的URL
 *@path /oss/downloadurl
 *@method GET
 *@param from 调用的服务名称
 *@param bucket 文件存放的oss桶， 0不持久桶，1持久桶，3静态文件桶
 *@param internal 值为1优先生成可供ECS内网访问的URL
 *@param objectkey 下载文件的名称
 *@param expires 指定生成的url超时时间（可选），unix 时间戳，单位秒
 *@return 成功返回PDownload，失败返回PResult
 */

/*
 *@note 内网获取多个下载文件的URL
 *@path /oss/downloadurls
 *@method GET
 *@param from 调用的服务名称
 *@param bucket 文件存放的oss桶， 0不持久桶，1持久桶，3静态文件桶
 *@param objectkeys 下载文件的名称,使用","分隔
 *@param expires 指定生成的url超时时间（可选），unix 时间戳，单位秒
 *@return 成功返回PDownloadArray，失败返回PResult
 */

/*
 *@note 初始化分片上传
 *@path /oss/multipartupload/init
 *@method GET
 *@param from 调用的服务名称
 *@param bucket 文件要存放的oss桶， 0 不持久桶，文件会过期，1持久桶，3静态文件桶
 *@param digest 文件摘要
 *@param length 文件大小，单位字节
 *@param extension 扩展名
 *@return 成功返回PMultiPartUpload，失败返回PResult
 */

/*
 *@note 中止分片上传
 *@path /oss/multipartupload/abort
 *@method GET
 *@param from 调用的服务名称
 *@param bucket 文件要存放的oss桶， 0 不持久桶，文件会过期，1持久桶，3静态文件桶
 *@param uploadid 初始化时返回的上传ID
 *@param objectkey 文件名称
 *@return PResult，成功errCode为0
 */

message PImgURL {
	string origin = 1; //原文件地址，图片文件不一定有
	string low = 2;	   //低清图地址 720宽，图片才有
	string thumb = 3;  //缩略图地址 默认360宽，图片才有
}

message PImgURLs {
	repeated PImgURL list = 1;
}

// 普通文件（非图片文件）URL生成参数
message PGenUrlParam {
	int32 bucket = 1;
	int64 expires = 2;
	repeated string keys = 6;
}

message PImgSize {
	// object key
	string key = 1;
	// 图片宽
	int32 width = 2;
	// 图片高
	int32 height = 3;
	// 文件大小
	int32 size = 4;
}

// 图片文件URL生成参数
message PGenImgUrlParam {
	int32 bucket = 1;
	int64 expires = 2;
	repeated PImgSize imgs = 6;
}

enum EFrom {
	// 未知
	Unknown = 0;
	// 用户头像
	Portrait = 1;
	// 用户主页背景
	Background = 2;
	// 社区头像
	Community_Logo = 3;
	// 论坛Banner图
	Community_Banner = 4;
	// 帖子
	News = 6;
	// 论坛背景介绍图片
	Community_Introduce = 9;
	// VIP+形象照
	VIPP_Photo = 10;
	// VIP+背景图
	VIPP_Background = 11;
}

message PImageInfo {
	int64 id = 1;
	string objectkey = 2;
	string thumb = 3;
	string url = 4;
	int32 bucket = 5;
	string uuid = 6;
	EFrom from = 7;
	int64 time = 8;
	int32 State = 9;
	float pornrate = 10;
}

message PQueryParam {
	string uuid = 1;
	// begin,end：时间起止范围，unix time，秒
	int64 begin = 2;
	int64 end = 3;
	// 来源
	EFrom from = 4;
	// 状态 0待审核 1审核通过 2审核未通过 3自动审核通过 4自动审核为不通过 5审核失败
	int32 state = 5;
	// 分页偏移
	int32 offset = 6;
	// 分页大小
	int32 size = 7;
	//分值范围0-100
	int32 rate1 = 8;
	int32 rate2 = 9;
}

message PImageInfoList {
	repeated PImageInfo list = 1;
	// 用于查询时返回给定条件下的记录总数，且只当offset为0时会填充此值
	int32 total = 2;
}

service grpcOss {
	// 批量获取文件上传地址
	rpc GetUploadURLs(PFileInfoArray) returns (PUploadArray);
	// 批量获取非图片文件访问地址
	rpc GetObjectURLs(PGenUrlParam) returns (PStringList);
	// 批量获取图片文件访问地址
	rpc GetImageURLs(PGenImgUrlParam) returns (PImgURLs);
	
	// 图片监管系列
	rpc AddImageInfo(PImageInfoList) returns (PEmpty);
	rpc ForbidImage(PImageInfoList) returns (PEmpty);
	rpc PermitImage(PImageInfoList) returns (PEmpty);
	rpc SelectImage(PQueryParam) returns (PImageInfoList);
}